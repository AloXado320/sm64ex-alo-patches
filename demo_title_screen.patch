diff --git a/include/level_commands.h b/include/level_commands.h
index c5940bf..c9769f7 100644
--- a/include/level_commands.h
+++ b/include/level_commands.h
@@ -22,6 +22,7 @@
 #define VAR_CURR_ACT_NUM        2
 #define VAR_CURR_LEVEL_NUM      3
 #define VAR_CURR_AREA_INDEX     4
+#define VAR_CURR_DEMO_START_BUTTON  5
 
 #define WARP_CHECKPOINT 0x80
 #define WARP_NO_CHECKPOINT 0x00
@@ -102,6 +103,7 @@ enum LevelCommandsIDList
 #ifdef BETTERCAMERA
     LVL_SCRIPT_CMD_PUPPYVOLUME,
 #endif
+    LVL_SCRIPT_DEMO_SCREEN,
 };
 
 #ifdef NO_SEGMENTED_MEMORY
diff --git a/levels/intro/script.c b/levels/intro/script.c
index 15c9851..631ed5c 100644
--- a/levels/intro/script.c
+++ b/levels/intro/script.c
@@ -9,6 +9,7 @@
 #include "game/area.h"
 #include "game/level_update.h"
 #include "menu/level_select_menu.h"
+#include "extras/demo_screen.h"
 
 #include "levels/scripts.h"
 #include "levels/menu/header.h"
@@ -66,67 +67,36 @@ const LevelScript level_intro_splash_screen[] = {
     EXIT_AND_EXECUTE(/*seg*/ 0x14, _introSegmentRomStart, _introSegmentRomEnd, level_intro_mario_head_regular),
 };
 
-#ifdef GODDARD_MFACE
+
 const LevelScript level_intro_mario_head_regular[] = {
     INIT_LEVEL(),
     BLACKOUT(/*active*/ TRUE),
+#ifdef GODDARD_MFACE
     FIXED_LOAD(/*loadAddr*/ _goddardSegmentStart, /*romStart*/ _goddardSegmentRomStart, /*romEnd*/ _goddardSegmentRomEnd),
-    LOAD_MARIO_HEAD(/*loadHeadID*/ REGULAR_FACE),
+#endif
     LOAD_RAW(/*seg*/ 0x13, _behaviorSegmentRomStart, _behaviorSegmentRomEnd),
     LOAD_MIO0_TEXTURE(/*seg*/ 0x0A, _title_screen_bg_mio0SegmentRomStart, _title_screen_bg_mio0SegmentRomEnd),
 
     ALLOC_LEVEL_POOL(),
-    AREA(/*index*/ 1, intro_geo_mario_head_regular),
-    END_AREA(),
     FREE_LEVEL_POOL(),
 
     SLEEP(/*frames*/ 2),
     BLACKOUT(/*active*/ FALSE),
-    LOAD_AREA(/*area*/ 1),
-    SET_MENU_MUSIC(/*seq*/ 0x0002),
-    TRANSITION(/*transType*/ WARP_TRANSITION_FADE_FROM_STAR, /*time*/ 20, /*color*/ 0x00, 0x00, 0x00),
-    SLEEP(/*frames*/ 20),
-    CALL_LOOP(/*arg*/ 1, /*func*/ lvl_intro_update),
-    JUMP_IF(/*op*/ OP_EQ, /*arg*/ 100, script_intro_L1),
-    JUMP_IF(/*op*/ OP_EQ, /*arg*/ 101, script_intro_L2),
-    JUMP(script_intro_L4),
-};
-
-const LevelScript level_intro_mario_head_dizzy[] = {
-    INIT_LEVEL(),
-    BLACKOUT(/*active*/ TRUE),
-    FIXED_LOAD(/*loadAddr*/ _goddardSegmentStart, /*romStart*/ _goddardSegmentRomStart, /*romEnd*/ _goddardSegmentRomEnd),
-    LOAD_MARIO_HEAD(/*loadHeadID*/ DIZZY_FACE),
-    LOAD_RAW(/*seg*/ 0x13, _behaviorSegmentRomStart, _behaviorSegmentRomEnd),
-    LOAD_MIO0_TEXTURE(/*seg*/ 0x0A, _title_screen_bg_mio0SegmentRomStart, _title_screen_bg_mio0SegmentRomEnd),
-    ALLOC_LEVEL_POOL(),
 
-    AREA(/*index*/ 1, intro_geo_mario_head_dizzy),
-    END_AREA(),
+    DEMO_SCRIPT(LVL_DEMO_CLEAR), // we need to do this or else file select will be tainted with inputs
+    GET_OR_SET(/*op*/ OP_GET, /*var*/ VAR_CURR_DEMO_START_BUTTON),
+    JUMP_IF(/*op*/ OP_EQ, /*arg*/ 1, script_intro_L1), // was start pressed when demo ended last time?
 
-    FREE_LEVEL_POOL(),
-    SLEEP(/*frames*/ 2),
-    BLACKOUT(/*active*/ FALSE),
-    LOAD_AREA(/*area*/ 1),
-    SET_MENU_MUSIC(/*seq*/ 0x0082),
+    SET_MENU_MUSIC(/*seq*/ 0x0002),
     TRANSITION(/*transType*/ WARP_TRANSITION_FADE_FROM_STAR, /*time*/ 20, /*color*/ 0x00, 0x00, 0x00),
     SLEEP(/*frames*/ 20),
-    CALL_LOOP(/*arg*/ 2, /*func*/ lvl_intro_update),
-    JUMP_IF(/*op*/ OP_EQ, /*arg*/ 100, script_intro_L1),
-    JUMP_IF(/*op*/ OP_EQ, /*arg*/ 101, script_intro_L2),
-    JUMP(script_intro_L4),
-};
-#else
-extern const LevelScript script_intro_L1[];
-
-const LevelScript level_intro_mario_head_regular[] = {
-    JUMP(script_intro_L1),
+    DEMO_SCRIPT(LVL_DEMO_SET_ADVANCE), // advance the demo ID manually with a new command which sets the level as script register
+    JUMP(script_intro_L4), // go to ingame
 };
 
 const LevelScript level_intro_mario_head_dizzy[] = {
-    JUMP(script_intro_L1),
+    JUMP(level_intro_mario_head_regular),
 };
-#endif
 
 const LevelScript level_intro_entry_4[] = {
     INIT_LEVEL(),
@@ -140,6 +110,7 @@ const LevelScript level_intro_entry_4[] = {
 
     AREA(/*index*/ 1, intro_geo_000414),
     END_AREA(),
+    DEMO_SCRIPT(LVL_DEMO_CLEAR), // we need to do this or else file select will be tainted with inputs
 
     FREE_LEVEL_POOL(),
     LOAD_AREA(/*area*/ 1),
diff --git a/src/engine/level_script.c b/src/engine/level_script.c
index 54395ed..d2c6dea 100644
--- a/src/engine/level_script.c
+++ b/src/engine/level_script.c
@@ -32,6 +32,8 @@
 #include "extras/bettercamera.h"
 #endif
 
+#include "extras/demo_screen.h"
+
 #define CMD_GET(type, offset) (*(type *) (CMD_PROCESS_OFFSET(offset) + (u8 *) sCurrentCmd))
 
 // These are equal
@@ -767,6 +769,9 @@ static void level_cmd_get_or_set_var(void) {
             case 4:
                 gCurrAreaIndex = sRegister;
                 break;
+            case 5: 
+                gDemoPressedStart = sRegister; 
+                break;
         }
     } else {
         switch (CMD_GET(u8, 3)) {
@@ -785,6 +790,9 @@ static void level_cmd_get_or_set_var(void) {
             case 4:
                 sRegister = gCurrAreaIndex;
                 break;
+            case 5:
+                sRegister = gDemoPressedStart;
+                break;
         }
     }
 
@@ -825,6 +833,37 @@ static void level_cmd_puppyvolume(void) {
 }
 #endif
 
+void level_cmd_demo(void) {
+    s16 screenDemoLvls[] = {
+        LEVEL_BOWSER_1,
+        LEVEL_WF,
+        LEVEL_CCM,
+        LEVEL_BBH,
+        LEVEL_JRB,
+        LEVEL_HMC,
+        LEVEL_PSS
+    };
+
+    s16 count = ARRAY_COUNT(screenDemoLvls) - 1;
+
+    switch (CMD_GET(s16, 2)) {
+        case LVL_DEMO_SET_ADVANCE:
+            start_demo_intro(0);
+            if (gScreenDemoLevelID == count) {
+                sRegister = screenDemoLvls[count];
+                gScreenDemoLevelID = 0;
+            } else {
+                sRegister = screenDemoLvls[gScreenDemoLevelID++];
+            }
+            break;
+        case LVL_DEMO_CLEAR:
+            gCurrDemoInput = NULL;
+            break;
+    }
+
+    sCurrentCmd = CMD_NEXT;
+}
+
 static void (*LevelScriptJumpTable[])(void) = {
     /*00*/ level_cmd_load_and_execute,
     /*01*/ level_cmd_exit_and_execute,
@@ -890,6 +929,7 @@ static void (*LevelScriptJumpTable[])(void) = {
 #ifdef BETTERCAMERA
     /*3D*/ level_cmd_puppyvolume,
 #endif
+    level_cmd_demo,
 };
 
 struct LevelCommand *level_script_execute(struct LevelCommand *cmd) {
diff --git a/src/extras/demo_screen.c b/src/extras/demo_screen.c
new file mode 100644
index 0000000..288a7c2
--- /dev/null
+++ b/src/extras/demo_screen.c
@@ -0,0 +1,46 @@
+#include <ultra64.h>
+#include "sm64.h"
+
+#include "demo_screen.h"
+#include "game/area.h"
+#include "game/game_init.h"
+#include "game/memory.h"
+#include "game/print.h"
+#include "level_table.h"
+
+s16 gDemoPressedStart = FALSE;
+s16 gScreenDemoLevelID = 0;
+
+u16 gDemoInputListIDForIntro = 0;
+
+void print_intro_text_demo(void) {
+    if (gControllerBits == 0) {
+        print_text_centered(160, 20, "NO CONTROLLER");
+    } else {
+        print_text_centered(160, 164, "SUPER MARIO 64");
+        print_text_centered(160, 128, "MADE BY");
+        print_text_centered(160, 110, "NINTENDO");
+        print_text_centered(160, 38, "PRESS START");
+        print_text_centered(160, 20, "COPYRIGHT 1996");
+    }
+}
+
+s32 start_demo_intro(s16 timer) {
+	gCurrDemoInput = NULL;
+	gDemoPressedStart = FALSE;
+    // start the mario demo animation for the demo list.
+    load_patchable_table(&gDemo, gDemoInputListIDForIntro);
+
+    // if the next demo sequence ID is the count limit, reset it back to
+    // the first sequence.
+
+    if((++gDemoInputListIDForIntro) == gDemo.animDmaTable->count)
+        gDemoInputListIDForIntro = 0;
+
+    // add 1 (+4) to the pointer to skip the demoID.
+    gCurrDemoInput = ((struct DemoInput *) gDemo.targetAnim) + 1;
+    timer = (s8)((struct DemoInput *) gDemo.targetAnim)->timer;
+    gCurrSaveFileNum = 1;
+    gCurrActNum = 6;
+    return timer;
+}
diff --git a/src/extras/demo_screen.h b/src/extras/demo_screen.h
new file mode 100644
index 0000000..8f0efc6
--- /dev/null
+++ b/src/extras/demo_screen.h
@@ -0,0 +1,24 @@
+#ifndef DEMO_SCREEN_H
+#define DEMO_SCREEN_H
+
+#include "level_commands.h"
+
+extern s16 gDemoPressedStart;
+extern s16 gScreenDemoLevelID;
+
+extern u16 gDemoInputListIDForIntro;
+
+enum LevelScriptDemoArgs {
+    LVL_DEMO_SET_ADVANCE,
+    LVL_DEMO_CLEAR
+};
+
+extern void print_intro_text_demo(void);
+extern s32 start_demo_intro(s16 timer);
+
+extern void level_cmd_demo(void);
+
+#define DEMO_SCRIPT(arg) \
+    CMD_BBH(LVL_SCRIPT_DEMO_SCREEN, 0x04, arg)
+
+#endif // OPTIONS_MENU_H
diff --git a/src/game/level_update.c b/src/game/level_update.c
index d2f48f4..aefe74a 100644
--- a/src/game/level_update.c
+++ b/src/game/level_update.c
@@ -43,6 +43,7 @@
 #endif
 
 #include "extras/misc_functions.h"
+#include "extras/demo_screen.h"
 
 #define PLAY_MODE_NORMAL 0
 #define PLAY_MODE_PAUSED 2
@@ -1002,12 +1003,13 @@ void basic_update(UNUSED s16 *arg) {
 
 s32 play_mode_normal(void) {
     if (gCurrDemoInput != NULL) {
-        print_intro_text();
+        print_intro_text_demo();
         if (gPlayer1Controller->buttonPressed & END_DEMO) {
             level_trigger_warp(gMarioState,
                                gCurrLevelNum == LEVEL_PSS ? WARP_OP_DEMO_END : WARP_OP_DEMO_NEXT);
         } else if (!gWarpTransition.isActive && sDelayedWarpOp == WARP_OP_NONE
                    && (gPlayer1Controller->buttonPressed & START_BUTTON)) {
+            gDemoPressedStart = TRUE;
             level_trigger_warp(gMarioState, WARP_OP_DEMO_NEXT);
         }
     }
