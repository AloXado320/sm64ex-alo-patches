diff --git a/include/anti_patches.h b/include/anti_patches.h
new file mode 100644
index 0000000..ec68f65
--- /dev/null
+++ b/include/anti_patches.h
@@ -0,0 +1,37 @@
+#ifndef ANTI_PATCHES_H
+#define ANTI_PATCHES_H
+
+// Anti Fun Patch
+// Mostly a compilation of code provided by a few people
+// This patch changes most of Mario's physics that are considered remarkable
+// and also changes some "exploits" used in speedruns
+#define ANTI_PATCHES TRUE
+
+/// Fixes backwards long jump, preveting Mario from getting negative speeds
+#define ANTI_PATCH_BACKWARDS_LONG_JUMP (0 || ANTI_PATCHES)
+/// Changes how "Blast away the wall" is obtained, fixing it's skip
+#define ANTI_PATCH_BLAST_AWAY_WALL (0 || ANTI_PATCHES)
+/// Fixes lakitu skip at the beginning of the game
+#define ANTI_PATCH_LAKITU_INTRO_SKIP (0 || ANTI_PATCHES)
+/// Fixes platform rising on Wii (if you plan to inject the rom)
+#define ANTI_PATCH_RISING_FLATFORM_WII (0 || ANTI_PATCHES)
+/// Changes Bob-omb behavior, so now after throwing it becomes intangible
+#define ANTI_PATCH_BOBOMB_INTANGIBLE (0 || ANTI_PATCHES)
+/// Fixes Mario still alive after getting shot by a cannon even while 0 hp
+#define ANTI_PATCH_ZOMBIE_MARIO_CANNON (0 || ANTI_PATCHES)
+/// Fixes hands-free holding glitch, more info in it's code comment
+#define ANTI_PATCH_HANDS_FREE_HOLDING (0 || ANTI_PATCHES)
+/// Fixes triple jump on slopes
+#define ANTI_PATCH_TRIPLE_JUMP_SLOPES (0 || ANTI_PATCHES)
+/// Fixes kick while holding jump on slopes
+#define ANTI_PATCH_KICKING_SLOPES (0 || ANTI_PATCHES)
+/// Fixes shell negative hyperspeed
+#define ANTI_PATCH_NEGATIVE_SHELL_SPEED (0 || ANTI_PATCHES)
+/// Reset mario's speed in wallkick
+#define ANTI_PATCH_SPEED_WALLKICK (0 || ANTI_PATCHES)
+/// Fix hat in hand glitch
+#define ANTI_PATCH_HAT_IN_HAND (0 || ANTI_PATCHES)
+/// Fix groundpound height damage
+#define ANTI_PATCH_GROUNDPOUND_HEIGHT (0 || ANTI_PATCHES)
+
+#endif // ANTI_PATCHES
diff --git a/include/config.h b/include/config.h
index a53af26..80519e4 100644
--- a/include/config.h
+++ b/include/config.h
@@ -10,6 +10,8 @@
 
 // Qol Defines
 #include "qol_defines.h"
+// Anti Patches
+#include "anti_patches.h"
 
 // Bug Fixes
 // --| Post-JP Version Nintendo Bug Fixes
diff --git a/levels/wf/script.c b/levels/wf/script.c
index 6697b49..b129500 100644
--- a/levels/wf/script.c
+++ b/levels/wf/script.c
@@ -40,7 +40,11 @@ static const LevelScript script_func_local_2[] = {
     OBJECT(/*model*/ MODEL_WF_SLIDING_PLATFORM,         /*pos*/  3328, 1075,  -767, /*angle*/ 0,  90, 0, /*behParam*/ 0x00010000, /*beh*/ bhvWfSlidingPlatform),
     OBJECT(/*model*/ MODEL_WF_SLIDING_PLATFORM,         /*pos*/  3328, 1075, -2815, /*angle*/ 0,  90, 0, /*behParam*/ 0x00030000, /*beh*/ bhvWfSlidingPlatform),
     OBJECT(/*model*/ MODEL_WF_TUMBLING_BRIDGE,          /*pos*/  1792, 2496,  1600, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhvWfTumblingBridge),
+#if ANTI_PATCH_BLAST_AWAY_WALL
+    OBJECT(/*model*/ MODEL_WF_BREAKABLE_WALL_RIGHT,     /*pos*/   512, 2176,  2944, /*angle*/ 0,   0, 0, /*behParam*/ 0x05000000, /*beh*/ bhvWfBreakableWallRight),
+#else
     OBJECT(/*model*/ MODEL_WF_BREAKABLE_WALL_RIGHT,     /*pos*/   512, 2176,  2944, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhvWfBreakableWallRight),
+#endif
     OBJECT(/*model*/ MODEL_WF_BREAKABLE_WALL_LEFT,      /*pos*/ -1023, 2176,  2944, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhvWfBreakableWallLeft),
     OBJECT_WITH_ACTS(/*model*/ MODEL_WF_KICKABLE_BOARD,           /*pos*/    13, 3584, -1407, /*angle*/ 0, 315, 0, /*behParam*/ 0x00000000, /*beh*/ bhvKickableBoard, /*acts*/ ACT_2 | ACT_3 | ACT_4 | ACT_5 | ACT_6),
     OBJECT_WITH_ACTS(/*model*/ MODEL_1UP,                         /*pos*/  -384, 3584,     6, /*angle*/ 0,   0, 0, /*behParam*/ 0x00000000, /*beh*/ bhv1Up,            /*acts*/ ACT_2 | ACT_3 | ACT_4 | ACT_5 | ACT_6),
@@ -87,7 +91,9 @@ static const LevelScript script_func_local_4[] = {
     OBJECT_WITH_ACTS(/*model*/ MODEL_STAR,  /*pos*/ -2500, 1500, -750, /*angle*/ 0, 0, 0, /*behParam*/ 0x02000000, /*beh*/ bhvStar,                 /*acts*/ ALL_ACTS),
     OBJECT_WITH_ACTS(/*model*/ MODEL_NONE,  /*pos*/  4600,  550, 2500, /*angle*/ 0, 0, 0, /*behParam*/ 0x03000000, /*beh*/ bhvHiddenRedCoinStar, /*acts*/ ALL_ACTS),
     OBJECT_WITH_ACTS(/*model*/ MODEL_STAR,  /*pos*/  2880, 4300,  190, /*angle*/ 0, 0, 0, /*behParam*/ 0x04000000, /*beh*/ bhvStar,                 /*acts*/ ALL_ACTS),
+#if !ANTI_PATCH_BLAST_AWAY_WALL
     OBJECT_WITH_ACTS(/*model*/ MODEL_STAR,  /*pos*/   590, 2450, 2650, /*angle*/ 0, 0, 0, /*behParam*/ 0x05000000, /*beh*/ bhvStar,                 /*acts*/ ALL_ACTS),
+#endif
     RETURN(),
 };
 
diff --git a/src/game/behaviors/bobomb.inc.c b/src/game/behaviors/bobomb.inc.c
index 2e3a314..9fdafbe 100644
--- a/src/game/behaviors/bobomb.inc.c
+++ b/src/game/behaviors/bobomb.inc.c
@@ -29,6 +29,9 @@ void bobomb_spawn_coin(void) {
 
 void bobomb_act_explode(void) {
     struct Object *explosion;
+#if ANTI_PATCH_BOBOMB_INTANGIBLE
+    cur_obj_become_intangible();
+#endif
     if (o->oTimer < 5)
         cur_obj_scale(1.0 + (f32) o->oTimer / 5.0);
     else {
@@ -100,6 +103,9 @@ void bobomb_act_chase_mario(void) {
 void bobomb_act_launched(void) {
     s16 collisionFlags = 0;
     collisionFlags = object_step();
+#if ANTI_PATCH_BOBOMB_INTANGIBLE
+    cur_obj_become_intangible();
+#endif
     if ((collisionFlags & OBJ_COL_FLAG_GROUNDED) == OBJ_COL_FLAG_GROUNDED)
         o->oAction = BOBOMB_ACT_EXPLODE; /* bit 0 */
 }
diff --git a/src/game/behaviors/breakable_wall.inc.c b/src/game/behaviors/breakable_wall.inc.c
index dbb92c8..b7d92eb 100644
--- a/src/game/behaviors/breakable_wall.inc.c
+++ b/src/game/behaviors/breakable_wall.inc.c
@@ -5,6 +5,9 @@ void bhv_wf_breakable_wall_loop(void) {
         cur_obj_become_tangible();
         if (obj_check_if_collided_with_object(o, gMarioObject)) {
             if (cur_obj_has_behavior(bhvWfBreakableWallRight))
+                #if ANTI_PATCH_BLAST_AWAY_WALL   
+                spawn_default_star(590.0f, 2450.0f, 2650.0f);
+                #endif
                 play_puzzle_jingle();
             create_sound_spawner(SOUND_GENERAL_WALL_EXPLOSION);
             o->oInteractType = 8;
diff --git a/src/game/behaviors/camera_lakitu.inc.c b/src/game/behaviors/camera_lakitu.inc.c
index c3e7f44..8d13148 100644
--- a/src/game/behaviors/camera_lakitu.inc.c
+++ b/src/game/behaviors/camera_lakitu.inc.c
@@ -28,7 +28,11 @@ void bhv_camera_lakitu_init(void) {
 static void camera_lakitu_intro_act_trigger_cutscene(void) {
     //! These bounds are slightly smaller than the actual bridge bounds, allowing
     //  the RTA speedrunning method of lakitu skip
+#if ANTI_PATCH_LAKITU_INTRO_SKIP
+    if (gMarioObject->oPosX > -555.0f && gMarioObject->oPosX < 555.0f && gMarioObject->oPosY > 800.0f
+#else
     if (gMarioObject->oPosX > -544.0f && gMarioObject->oPosX < 545.0f && gMarioObject->oPosY > 800.0f
+#endif
         && gMarioObject->oPosZ > -2000.0f && gMarioObject->oPosZ < -177.0f
         && gMarioObject->oPosZ < -177.0f) // always double check your conditions
     {
diff --git a/src/game/behaviors/falling_rising_platform.inc.c b/src/game/behaviors/falling_rising_platform.inc.c
index 4bd7ecd..0b59947 100644
--- a/src/game/behaviors/falling_rising_platform.inc.c
+++ b/src/game/behaviors/falling_rising_platform.inc.c
@@ -8,7 +8,11 @@ void bhv_squishable_platform_loop(void) {
 void bhv_bitfs_sinking_platform_loop(void) {
     o->oPosY -=
         sins(o->oPlatformTimer)
+#if ANTI_PATCH_RISING_FLATFORM_WII
+        * 0.58f;
+#else
         * 0.58; //! f32 double conversion error accumulates on Wii VC causing the platform to rise up
+#endif
     o->oPlatformTimer += 0x100;
 }
 
diff --git a/src/game/interaction.c b/src/game/interaction.c
index d878bd0..9d113da 100644
--- a/src/game/interaction.c
+++ b/src/game/interaction.c
@@ -1061,7 +1061,11 @@ u32 interact_door(struct MarioState *m, UNUSED u32 interactType, struct Object *
 }
 
 u32 interact_cannon_base(struct MarioState *m, UNUSED u32 interactType, struct Object *o) {
-    if (m->action != ACT_IN_CANNON) {
+    if (m->action != ACT_IN_CANNON
+#if ANTI_PATCH_ZOMBIE_MARIO_CANNON
+    && m->health >= 0x100
+#endif
+    ) {
         mario_stop_riding_and_holding(m);
         o->oInteractStatus = INT_STATUS_INTERACTED;
         m->interactObj = o;
diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
index 2d92a94..deb70f6 100644
--- a/src/game/mario_actions_airborne.c
+++ b/src/game/mario_actions_airborne.c
@@ -70,18 +70,17 @@ s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
 
     fallHeight = m->peakHeight - m->pos[1];
 
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wtype-limits"
-
-    //! Never true
-    if (m->actionState == ACT_GROUND_POUND) {
+#if ANTI_PATCH_GROUNDPOUND_HEIGHT
+    if (m->action == ACT_GROUND_POUND)
+#else
+    if (m->actionState == ACT_GROUND_POUND)
+#endif
+    {
         damageHeight = 600.0f;
     } else {
         damageHeight = 1150.0f;
     }
 
-#pragma GCC diagnostic pop
-
     if (m->action != ACT_TWIRLING && m->floor->type != SURFACE_BURNING) {
         if (m->vel[1] < -55.0f) {
             if (fallHeight > 3000.0f) {
@@ -415,12 +414,20 @@ u32 common_air_action_step(struct MarioState *m, u32 landAction, s32 animation,
                     // not able to ledge grab it.
                     if (m->forwardVel >= 38.0f) {
                         m->particleFlags |= PARTICLE_VERTICAL_STAR;
+                        #if ANTI_PATCH_HANDS_FREE_HOLDING
+                        drop_and_set_mario_action(m, ACT_BACKWARD_AIR_KB, 0);
+                        #else
                         set_mario_action(m, ACT_BACKWARD_AIR_KB, 0);
+                        #endif
                     } else {
                         if (m->forwardVel > 8.0f) {
                             mario_set_forward_vel(m, -8.0f);
                         }
+                        #if ANTI_PATCH_HANDS_FREE_HOLDING
+                        drop_and_set_mario_action(m, ACT_SOFT_BONK, 0);
+                        #else
                         return set_mario_action(m, ACT_SOFT_BONK, 0);
+                        #endif
                     }
                 }
             } else {
@@ -1317,6 +1324,9 @@ s32 act_air_hit_wall(struct MarioState *m) {
         if (m->input & INPUT_A_PRESSED) {
             m->vel[1] = 52.0f;
             m->faceAngle[1] += 0x8000;
+            #if ANTI_PATCH_SPEED_WALLKICK
+            m->forwardVel = 0.0f;
+            #endif
             return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
         }
     } else if (m->forwardVel >= 38.0f) {
diff --git a/src/game/mario_actions_cutscene.c b/src/game/mario_actions_cutscene.c
index aa51315..c646cab 100644
--- a/src/game/mario_actions_cutscene.c
+++ b/src/game/mario_actions_cutscene.c
@@ -1635,6 +1635,12 @@ s32 act_putting_on_cap(struct MarioState *m) {
     }
 
     if (is_anim_at_end(m)) {
+#if ANTI_PATCH_HAT_IN_HAND
+        if (m->flags & MARIO_CAP_IN_HAND) {
+            m->flags &= ~MARIO_CAP_IN_HAND;
+            m->flags |= MARIO_CAP_ON_HEAD;
+        }
+#endif
         set_mario_action(m, ACT_IDLE, 0);
         disable_time_stop();
     }
diff --git a/src/game/mario_actions_moving.c b/src/game/mario_actions_moving.c
index f12cd26..46f474c 100644
--- a/src/game/mario_actions_moving.c
+++ b/src/game/mario_actions_moving.c
@@ -151,7 +151,11 @@ void slide_bonk(struct MarioState *m, u32 fastAction, u32 slowAction) {
 s32 set_triple_jump_action(struct MarioState *m, UNUSED u32 action, UNUSED u32 actionArg) {
     if (m->flags & MARIO_WING_CAP) {
         return set_mario_action(m, ACT_FLYING_TRIPLE_JUMP, 0);
-    } else if (m->forwardVel > 20.0f) {
+    } else if (m->forwardVel > 20.0f
+#if ANTI_PATCH_TRIPLE_JUMP_SLOPES
+    && !mario_floor_is_slope(m)
+#endif
+    ) {
         return set_mario_action(m, ACT_TRIPLE_JUMP, 0);
     } else {
         return set_mario_action(m, ACT_JUMP, 0);
@@ -388,6 +392,12 @@ void update_shell_speed(struct MarioState *m) {
         m->forwardVel = 64.0f;
     }
 
+#if ANTI_PATCH_NEGATIVE_SHELL_SPEED
+    if (m->forwardVel < 0.0f) {
+        m->forwardVel = 0.0f;
+    }
+#endif
+
     m->faceAngle[1] =
         m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0x800, 0x800);
 
@@ -862,7 +872,11 @@ s32 act_move_punching(struct MarioState *m) {
         return set_mario_action(m, ACT_BEGIN_SLIDING, 0);
     }
 
-    if (m->actionState == 0 && (m->input & INPUT_A_DOWN)) {
+    if (m->actionState == 0 && (m->input & INPUT_A_DOWN)
+#if ANTI_PATCH_KICKING_SLOPES
+    && !mario_floor_is_slope(m)
+#endif
+    ) {
         return set_mario_action(m, ACT_JUMP_KICK, 0);
     }
 
@@ -1863,7 +1877,7 @@ s32 act_hold_freefall_land(struct MarioState *m) {
 }
 
 s32 act_long_jump_land(struct MarioState *m) {
-#ifdef VERSION_SH
+#if ANTI_PATCH_BACKWARDS_LONG_JUMP
     // BLJ (Backwards Long Jump) speed build up fix, crushing SimpleFlips's dreams since July 1997
     if (m->forwardVel < 0.0f) {
         m->forwardVel = 0.0f;
