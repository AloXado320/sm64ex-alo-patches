diff --git a/src/engine/behavior_script.c b/src/engine/behavior_script.c
index f61f2bf..1d2cd36 100644
--- a/src/engine/behavior_script.c
+++ b/src/engine/behavior_script.c
@@ -11,6 +11,7 @@
 #include "game/obj_behaviors_2.h"
 #include "game/object_helpers.h"
 #include "game/object_list_processor.h"
+#include "game/level_update.h" // Frameskip
 #include "graph_node.h"
 #include "surface_collision.h"
 
@@ -919,6 +920,15 @@ void cur_obj_update(void) {
     f32 distanceFromMario;
     BhvCommandProc bhvCmdProc;
     s32 bhvProcResult;
+#ifdef TARGET_N64
+    // Frameskip
+    s32 hasAnimation = (gCurrentObject->header.gfx.node.flags & GRAPH_RENDER_HAS_ANIMATION) != 0;
+
+    if (gGameLagged && hasAnimation && gCurrentObject->header.gfx.animInfo.curAnim != NULL) {
+        struct AnimInfo *animInfo = &gCurrentObject->header.gfx.animInfo;
+        animInfo->animFrame = geo_update_animation_frame(animInfo, &animInfo->animFrameAccelAssist);
+    }
+#endif
 
     // Calculate the distance from the object to Mario.
     if (objFlags & OBJ_FLAG_COMPUTE_DIST_TO_MARIO) {
diff --git a/src/game/level_update.c b/src/game/level_update.c
index 9fac1ca..fda77b7 100644
--- a/src/game/level_update.c
+++ b/src/game/level_update.c
@@ -208,6 +208,11 @@ s8 sWarpCheckpointActive = FALSE;
 u8 unused3[4];
 u8 unused4[2];
 
+// Frameskip
+s8 gGameLagged = 0;
+OSTime sOldTime = 0;
+OSTime sDeltaTime = 0;
+
 u16 level_control_timer(s32 timerOp) {
     switch (timerOp) {
         case TIMER_CONTROL_SHOW:
@@ -996,6 +1001,7 @@ void basic_update(UNUSED s16 *arg) {
 }
 
 s32 play_mode_normal(void) {
+    OSTime newTime = osGetTime();
     if (gCurrDemoInput != NULL) {
         print_intro_text();
         if (gPlayer1Controller->buttonPressed & END_DEMO) {
@@ -1014,7 +1020,35 @@ s32 play_mode_normal(void) {
         gHudDisplay.timer += 1;
     }
 
+// Only N64 - shouldn't be necessary in pc-port
+#ifdef TARGET_N64
+    sDeltaTime += newTime - sOldTime;
+    sOldTime = newTime;
+    gGameLagged = -1;
+    while (sDeltaTime > 1562744) {
+        sDeltaTime -= 1562744;
+        if (sTimerRunning && gHudDisplay.timer < 17999) {
+            gHudDisplay.timer += 1;
+        }
+        gGameLagged += 1;
+        area_update_objects();
+        // put fast64's scroll_textures() function here
+        // scroll_textures();
+        if (gGameLagged && gCurrentArea != NULL && gCurrentArea->camera->cutscene != 0) {
+            play_cutscene(gCurrentArea->camera);
+        }
+    }
+
+#else
+    if (sTimerRunning && gHudDisplay.timer < 17999) {
+        gHudDisplay.timer += 1;
+    }
+
     area_update_objects();
+    // put fast64's scroll_textures() function here for pc-port
+    // scroll_textures();
+#endif
+
     update_hud_values();
 
     if (gCurrentArea != NULL) {
@@ -1181,15 +1215,23 @@ s32 update_level(void) {
             break;
         case PLAY_MODE_PAUSED:
             changeLevel = play_mode_paused();
+            sDeltaTime = 0;
+            sOldTime = osGetTime();
             break;
         case PLAY_MODE_CHANGE_AREA:
             changeLevel = play_mode_change_area();
+            sDeltaTime = 0;
+            sOldTime = osGetTime();
             break;
         case PLAY_MODE_CHANGE_LEVEL:
             changeLevel = play_mode_change_level();
+            sDeltaTime = 0;
+            sOldTime = osGetTime();
             break;
         case PLAY_MODE_FRAME_ADVANCE:
             changeLevel = play_mode_frame_advance();
+            sDeltaTime = 0;
+            sOldTime = osGetTime();
             break;
     }
 
@@ -1299,6 +1341,8 @@ s32 lvl_init_or_update(s16 initOrUpdate, UNUSED s32 unused) {
     switch (initOrUpdate) {
         case 0:
             result = init_level();
+            sDeltaTime = 0;
+            sOldTime = osGetTime();
             break;
         case 1:
             result = update_level();
diff --git a/src/game/level_update.h b/src/game/level_update.h
index 90cd167..088468b 100644
--- a/src/game/level_update.h
+++ b/src/game/level_update.h
@@ -72,6 +72,9 @@ extern s16 sTransitionTimer;
 extern void (*sTransitionUpdate)(s16 *);
 extern u8 unused3[4];
 
+// Frameskip
+extern s8 gGameLagged;
+
 struct WarpDest {
     u8 type;
     u8 levelNum;
