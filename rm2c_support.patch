diff --git a/Makefile b/Makefile
index 9b15874..5451aaa 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,8 @@ DEFINES :=
 COMPILER_N64 ?= gcc
 $(eval $(call validate-option,COMPILER_N64,ido gcc))
 
+# Accept RM2C level folder output
+RM2C ?= 0
 # Build debug version
 DEBUG ?= 0
 # Build for original N64 (no pc code)
@@ -103,6 +105,16 @@ AUDIO_API ?= SDL2
 # WII_U (forced if the target is Wii U), 3DS (forced if the target is 3DS), SWITCH (forced if the target is SWITCH)
 CONTROLLER_API ?= SDL2
 
+.PHONY: RM2CPC
+RM2CPC:
+	$(info "Running ...")
+	make -j4 RM2C=1 TARGET_N64=0 DEBUG=1 NODRAWINGDISTANCE=1 GODDARD_MFACE=0 PORT_MOP_OBJS=1
+    
+.PHONY: RM2CN64
+RM2CN64:
+	$(info "Running ...")
+	make -j4 RM2C=1 TARGET_N64=1 DEBUG=1 GODDARD_MFACE=0 PORT_MOP_OBJS=1
+
 ifeq ($(TARGET_WII_U),1)
   RENDER_API := WHB
   WINDOW_API := WHB
@@ -552,7 +564,7 @@ endif
 include Makefile.split
 
 # Source code files
-LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c) $(wildcard levels/*/custom.geo.c) $(wildcard levels/*/custom.script.c) $(wildcard levels/*/custom.leveldata.c)
 C_FILES       := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
 CXX_FILES     := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
 S_FILES       := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.s))
@@ -706,6 +718,12 @@ endif # !TARGET_PORT_CONSOLE
 
 endif # !TARGET_N64
 
+# Add RM2C to flags, add var for internal name
+ifeq ($(RM2C),1)
+  CUSTOM_C_DEFINES += -DRM2C
+  RM2C_C_FLAGS = -fno-toplevel-reorder
+endif
+
 # Check for Debug option
 ifeq ($(DEBUG),1)
   CUSTOM_C_DEFINES += -DDEBUG
@@ -884,7 +902,7 @@ LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/
 # -mdivide-breaks:  Uses IDO compiler like behavior for dividing by zero (Old emus such as Project64 1.6)
 # -fno-jump-tables: Disables jump function tables (Wii/Wii U virtual console)
 ifeq ($(COMPILER_N64),gcc)
-  CFLAGS := -march=vr4300 -mfix4300 -mabi=32 -mno-shared -G 0 $(COMMON_CFLAGS) -mhard-float -mdivide-breaks -fno-stack-protector -fno-common -fno-zero-initialized-in-bss -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I . -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -fno-jump-tables -ffreestanding -fwrapv -Wall -Wextra
+  CFLAGS := -march=vr4300 -mfix4300 -mabi=32 -mno-shared -G 0 $(COMMON_CFLAGS) -mhard-float -mdivide-breaks -fno-stack-protector -fno-common -fno-zero-initialized-in-bss -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I . -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -fno-jump-tables -ffreestanding -fwrapv -Wall -Wextra $(RM2C_C_FLAGS)
 endif
 
 CC_CHECK += $(CUSTOM_C_DEFINES)
@@ -1056,22 +1074,22 @@ endif
 
 ifeq ($(WINDOWS_BUILD),1)
   CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -Wall -Wextra -Wno-format-security
-  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv
+  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv $(RM2C_C_FLAGS)
 
 else ifeq ($(TARGET_WEB),1)
   CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -Wall -Wextra -Wno-format-security -s USE_SDL=2
-  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2 $(RM2C_C_FLAGS)
 
 # Linux / Other builds below
 else
   CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -Wall -Wextra -Wno-format-security
-  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv
+  CFLAGS := $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -fwrapv $(RM2C_C_FLAGS)
 
 endif
 
 ifeq ($(TARGET_WII_U),1)
   CC_CHECK += -ffunction-sections $(MACHDEP) -ffast-math -D__WIIU__ -D__WUT__ $(INCLUDE)
-  CFLAGS += -ffunction-sections $(MACHDEP) -ffast-math -D__WIIU__ -D__WUT__ $(INCLUDE)
+  CFLAGS += -ffunction-sections $(MACHDEP) -ffast-math -D__WIIU__ -D__WUT__ $(INCLUDE) $(RM2C_C_FLAGS)
 endif
 
 ifeq ($(TARGET_N3DS),1)
@@ -1079,7 +1097,7 @@ ifeq ($(TARGET_N3DS),1)
   LIBDIRS  := $(CTRULIB)
   export LIBPATHS  :=  $(foreach dir,$(LIBDIRS),-L$(dir)/lib)
   CC_CHECK += -mtp=soft -DARM11 -DosGetTime=n64_osGetTime -D_3DS -march=armv6k -mtune=mpcore -mfloat-abi=hard -mword-relocations -fomit-frame-pointer -ffast-math $(foreach dir,$(LIBDIRS),-I$(dir)/include)
-  CFLAGS += -mtp=soft -DARM11 -DosGetTime=n64_osGetTime -D_3DS -march=armv6k -mtune=mpcore -mfloat-abi=hard -mword-relocations -fomit-frame-pointer -ffast-math $(foreach dir,$(LIBDIRS),-I$(dir)/include)
+  CFLAGS += -mtp=soft -DARM11 -DosGetTime=n64_osGetTime -D_3DS -march=armv6k -mtune=mpcore -mfloat-abi=hard -mword-relocations -fomit-frame-pointer -ffast-math $(foreach dir,$(LIBDIRS),-I$(dir)/include) -fno-toplevel-reorder
   
   ifeq ($(DISABLE_N3DS_AUDIO),1)
     CFLAGS += -DDISABLE_N3DS_AUDIO
@@ -1091,7 +1109,7 @@ endif
 
 ifeq ($(TARGET_SWITCH),1)
   CC_CHECK := $(CC) $(NXARCH) -fsyntax-only -fsigned-char $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -Wall -Wextra -Wno-format-security -D__SWITCH__=1
-  CFLAGS := $(NXARCH) $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -ftls-model=local-exec -fPIC -fwrapv -D__SWITCH__=1
+  CFLAGS := $(NXARCH) $(OPT_FLAGS) $(BACKEND_CFLAGS) $(DEF_INC_CFLAGS) -fno-strict-aliasing -ftls-model=local-exec -fPIC -fwrapv -D__SWITCH__=1 $(RM2C_C_FLAGS)
 endif
 
 CC_CHECK += $(CUSTOM_C_DEFINES)
@@ -1178,6 +1196,7 @@ MIO0TOOL = $(TOOLS_DIR)/mio0$(EXT_PREFIX)
 N64CKSUM = $(TOOLS_DIR)/n64cksum$(EXT_PREFIX)
 N64GRAPHICS = $(TOOLS_DIR)/n64graphics$(EXT_PREFIX)
 N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci$(EXT_PREFIX)
+BINPNG = $(TOOLS_DIR)/BinPNG.py
 TEXTCONV = $(TOOLS_DIR)/textconv$(EXT_PREFIX)
 AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook$(EXT_PREFIX)
 VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc$(EXT_PREFIX)
@@ -1451,14 +1470,14 @@ endif
 ifeq ($(EXTERNAL_DATA),0)
 
 # Color Index CI8
-$(BUILD_DIR)/%.ci8: %.ci8.png
-	$(call print,Converting:,$<,$@)
-	$(V)$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+$(BUILD_DIR)/%.ci8.inc.c: %.ci8.png
+	$(call print,Converting CI:,$<,$@)
+	python3 $(BINPNG) $< $@ 8
 
 # Color Index CI4
-$(BUILD_DIR)/%.ci4: %.ci4.png
-	$(call print,Converting:,$<,$@)
-	$(V)$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+$(BUILD_DIR)/%.ci4.inc.c: %.ci4.png
+	$(call print,Converting CI:,$<,$@)
+	python3 $(BINPNG) $< $@ 4
 
 endif
 
@@ -1474,7 +1493,7 @@ $(BUILD_DIR)/%.elf: $(BUILD_DIR)/%.o
 # Override for level.elf, which otherwise matches the above pattern
 .SECONDEXPANSION:
 $(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
-	$(call print,Linking ELF file:,$<,$@)
+	$(call print,Linking Level ELF file:,$<,$@)
 	$(V)$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
 
 $(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf
diff --git a/Makefile.split b/Makefile.split
index 0df73d0..b74ea58 100644
--- a/Makefile.split
+++ b/Makefile.split
@@ -87,6 +87,9 @@ ifeq ($(PORT_MOP_OBJS),1)
   MOP_DIRS       := Blargg_MOP Checkpoint_Flag_MOP FlipBlock_MOP Flipswap_Platform_MOP Flipswap_Platform_Border_MOP Flipswitch_Panel_MOP Green_Switchboard_MOP Green_Switchboard_Gears_MOP Moving_Rotating_Block_MOP Noteblock_MOP SandBlock_MOP Shrink_Platform_MOP Shrink_Platform_Border_MOP Spring_MOP Switchblock_MOP Switchblock_Switch_MOP 
 endif
 
+#custom leveldata rules
+$(BUILD_DIR)/levels/%/custom.leveldata.elf: SEGMENT_ADDRESS := 0x0E000000
+
 # Actor Textures
 AMP_CHUCKYA_TEXTURES            := $(foreach dir,$(AMP_DIRS),        $(wildcard actors/$(dir)/*.png))
 BOBOMBS_BUBBLE_TEXTURES         := $(foreach dir,$(KING_BOBOMB_DIRS),$(wildcard actors/$(dir)/*.png))
diff --git a/data/behavior_data.c b/data/behavior_data.c
index 17d3adb..f1f3814 100644
--- a/data/behavior_data.c
+++ b/data/behavior_data.c
@@ -2988,6 +2988,22 @@ const BehaviorScript bhvAnimatedTexture[] = {
     END_LOOP(),
 };
 
+#ifdef RM2C
+const BehaviorScript RM_Scroll_Texture[] = {
+    BEGIN(OBJ_LIST_GENACTOR),
+    BEGIN_LOOP(),
+        CALL_NATIVE(uv_update_scroll),
+    END_LOOP(),
+};
+
+const BehaviorScript editor_Scroll_Texture[] = {
+    BEGIN(OBJ_LIST_GENACTOR),
+    BEGIN_LOOP(),
+        CALL_NATIVE(uv_update_scroll),
+    END_LOOP(),
+};
+#endif
+
 const BehaviorScript bhvBooInCastle[] = {
     BEGIN(OBJ_LIST_DEFAULT),
     OR_INT(oFlags, (OBJ_FLAG_COMPUTE_ANGLE_TO_MARIO | OBJ_FLAG_COMPUTE_DIST_TO_MARIO | OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
@@ -5987,7 +6003,11 @@ const BehaviorScript bhvPenguinRaceFinishLine[] = {
     BEGIN(OBJ_LIST_DEFAULT),
     OR_INT(oFlags, (OBJ_FLAG_ACTIVE_FROM_AFAR | OBJ_FLAG_COMPUTE_DIST_TO_MARIO | OBJ_FLAG_UPDATE_GFX_POS_AND_ANGLE)),
     BEGIN_LOOP(),
+		#ifdef RM2C
+        CALL_NATIVE(bhv_penguin_race_shortcut_check_update),
+		#else
         CALL_NATIVE(bhv_penguin_race_finish_line_update),
+		#endif
     END_LOOP(),
 };
 
diff --git a/include/behavior_data.h b/include/behavior_data.h
index 55b4070..5a34813 100644
--- a/include/behavior_data.h
+++ b/include/behavior_data.h
@@ -3,6 +3,10 @@
 
 #include "types.h"
 
+#ifdef RM2C
+extern const BehaviorScript editor_Scroll_Texture[];
+extern const BehaviorScript RM_Scroll_Texture[];
+#endif
 extern const BehaviorScript bhvStarDoor[];
 extern const BehaviorScript bhvMrI[];
 extern const BehaviorScript bhvMrIBody[];
diff --git a/include/segment_symbols.h b/include/segment_symbols.h
index 4e77ddf..0484579 100644
--- a/include/segment_symbols.h
+++ b/include/segment_symbols.h
@@ -14,6 +14,11 @@
     DECLARE_SEGMENT(name) \
     DECLARE_SEGMENT(name##_segment_7)
 
+#define DECLARE_CUSTOM_LEVEL_SEGMENT(name) \
+    DECLARE_SEGMENT(name) \
+    DECLARE_SEGMENT(name##_segment_E) \
+    DECLARE_SEGMENT(name##_segment_19)
+
 DECLARE_ACTOR_SEGMENT(common0)
 DECLARE_ACTOR_SEGMENT(common1)
 DECLARE_ACTOR_SEGMENT(group0)
@@ -63,6 +68,20 @@ DECLARE_LEVEL_SEGMENT(ending)
 #undef STUB_LEVEL
 #undef DEFINE_LEVEL
 
+#define DEFINE_LEVEL(folder,_0) DECLARE_CUSTOM_LEVEL_SEGMENT(folder)
+
+#include "levels/custom_level_defines.h"
+
+#undef DEFINE_LEVEL
+
+#define MIO0_SEG(name, addr) \
+    extern u8 _##name##_mio0SegmentRomStart[]; \
+    extern u8 _##name##_mio0SegmentRomEnd[];
+
+#include "textures/skyboxes/Skybox_Rules.ld"
+
+#undef MIO0_SEG
+
 DECLARE_SEGMENT(segment2_mio0)
 
 DECLARE_SEGMENT(water_skybox_mio0)
diff --git a/include/sm64.h b/include/sm64.h
index 75de983..cbe1127 100644
--- a/include/sm64.h
+++ b/include/sm64.h
@@ -14,6 +14,14 @@
 #include "surface_terrains.h"
 #include "macros.h"
 
+//defines
+#include "game/tweaks.inc.c"
+
+#define bhvFish2 bhvManyBlueFishSpawner
+#define bhvFish3 bhvFewBlueFishSpawner
+#define bhvLargeFishGroup bhvFishSpawner
+#define MODEL_VCUTM_CHECKERBOARD_PLATFORM_SPAWNER MODEL_NONE
+
 #if defined(__GNUC__) && defined(TARGET_N64)
 void *memset(void *dest, int c, size_t n);
 int memcmp(const void *str1, const void *str2, size_t n);
diff --git a/levels/custom_level_defines.h b/levels/custom_level_defines.h
new file mode 100644
index 0000000..451d68b
--- /dev/null
+++ b/levels/custom_level_defines.h
@@ -0,0 +1 @@
+// Replace with RM2C Output after exporting a level
diff --git a/levels/menu/script.c b/levels/menu/script.c
index 890fc64..1b6444e 100644
--- a/levels/menu/script.c
+++ b/levels/menu/script.c
@@ -55,7 +55,7 @@ const LevelScript level_main_menu_entry_1[] = {
     SLEEP(/*frames*/ 16),
     CLEAR_LEVEL(),
     SLEEP_BEFORE_EXIT(/*frames*/ 1),
-    SET_REG(/*value*/ LEVEL_CASTLE_GROUNDS),
+    SET_REG(/*value*/ START_LEVEL),
     EXIT_AND_EXECUTE(/*seg*/ 0x15, _scriptsSegmentRomStart, _scriptsSegmentRomEnd, level_main_scripts_entry),
 };
 
diff --git a/levels/scripts.c b/levels/scripts.c
index 26930ab..40b43ed 100644
--- a/levels/scripts.c
+++ b/levels/scripts.c
@@ -40,6 +40,9 @@
 #define DEFINE_LEVEL(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10) + 3
 static const LevelScript script_exec_level_table[2
   #include "level_defines.h"
+  #undef DEFINE_LEVEL
+  #define DEFINE_LEVEL(_0, _1) + 3
+  #include "custom_level_defines.h"
 ];
 #undef DEFINE_LEVEL
 #undef STUB_LEVEL
@@ -51,7 +54,8 @@ static const LevelScript goto_mario_head_dizzy[4];
 static const LevelScript script_L5[4];
 
 #define STUB_LEVEL(_0, _1, _2, _3, _4, _5, _6, _7, _8)
-#define DEFINE_LEVEL(_0, _1, _2, folder, _4, _5, _6, _7, _8, _9, _10) static const LevelScript script_exec_ ## folder [4 + 1];
+#define DEFINE_LEVEL(_0, _1, _2, folder, _4, _5, _6, _7, _8, _9, _10) static const LevelScript script_exec_ ## folder [4 + 1]; \
+static const LevelScript custom_script_exec_ ## folder [4 + 1];
 
 #include "level_defines.h"
 
@@ -166,17 +170,44 @@ static const LevelScript script_L5[] = {
 
 // Include the level jumptable.
 
-#define STUB_LEVEL(_0, _1, _2, _3, _4, _5, _6, _7, _8)
-
-#define DEFINE_LEVEL(_0, levelenum, _2, folder, _4, _5, _6, _7, _8, _9, _10) JUMP_IF(OP_EQ, levelenum, script_exec_ ## folder),
-
 static const LevelScript script_exec_level_table[] = {
     GET_OR_SET(/*op*/ OP_GET, /*var*/ VAR_CURR_LEVEL_NUM),
+#define DEFINE_LEVEL(folder,levelenum) JUMP_IF(OP_EQ, levelenum, custom_script_exec_ ## folder),
+
+    #include "levels/custom_level_defines.h"
+
+#undef DEFINE_LEVEL
+
+#define STUB_LEVEL(_0, _1, _2, _3, _4, _5, _6, _7, _8)
+#define DEFINE_LEVEL(_0, levelenum, _2, folder, _4, _5, _6, _7, _8, _9, _10) JUMP_IF(OP_EQ, levelenum, script_exec_ ## folder),
     #include "levels/level_defines.h"
     EXIT(),
 };
 #undef DEFINE_LEVEL
 
+#ifdef RM2C
+
+#define DEFINE_LEVEL(folder,_0) \
+static const LevelScript custom_script_exec_ ## folder [] = { \
+    EXECUTE(0x19, _ ## folder ## _segment_19SegmentRomStart, _ ## folder ## _segment_19SegmentRomEnd, level_ ## folder ## _custom_entry), \
+    RETURN(), \
+};
+
+#include "levels/custom_level_defines.h"
+
+#undef DEFINE_LEVEL
+#define DEFINE_LEVEL(_0, _1, _2, folder, _4, _5, _6, _7, _8, _9, _10) \
+static const LevelScript script_exec_ ## folder [] = { \
+    EXECUTE(0x1A, _ ## folder ## SegmentRomStart, _ ## folder ## SegmentRomEnd, level_ ## folder ## _entry), \
+    RETURN(), \
+};
+
+#include "levels/level_defines.h"
+#undef STUB_LEVEL
+#undef DEFINE_LEVEL
+
+#else
+
 #define DEFINE_LEVEL(_0, _1, _2, folder, _4, _5, _6, _7, _8, _9, _10) \
 static const LevelScript script_exec_ ## folder [] = { \
     EXECUTE(0x1A, _ ## folder ## SegmentRomStart, _ ## folder ## SegmentRomEnd, level_ ## folder ## _entry), \
@@ -187,6 +218,8 @@ static const LevelScript script_exec_ ## folder [] = { \
 #undef STUB_LEVEL
 #undef DEFINE_LEVEL
 
+#endif
+
 const LevelScript script_func_global_1[] = {
     LOAD_MODEL_FROM_GEO(MODEL_BLUE_COIN_SWITCH,        blue_coin_switch_geo),
     LOAD_MODEL_FROM_GEO(MODEL_AMP,                     dAmpGeo),
diff --git a/sm64.ld b/sm64.ld
index bd1560c..6cdc489 100644
--- a/sm64.ld
+++ b/sm64.ld
@@ -51,6 +51,20 @@ OUTPUT_ARCH (mips)
    } \
    END_SEG(name)
 
+#define CUSTOM_LEVEL(name) \
+   BEGIN_SEG(name##_segment_E, 0x0E000000) \
+   { \
+      BUILD_DIR/levels/name/custom.leveldata.o(.data); \
+   } \
+   END_SEG(name##_segment_E) \
+   BEGIN_SEG(name##_segment_19, 0x19000000) \
+   { \
+	  BUILD_DIR/levels/name/custom.geo.o(.data); \
+	  BUILD_DIR/levels/name/custom.script.o(.data); \
+      . = ALIGN(0x10); \
+   } \
+   END_SEG(name##_segment_19)
+
 #define STANDARD_OBJECTS(name, segAddr, geoAddr) \
    BEGIN_SEG(name##_mio0, segAddr) \
    { \
@@ -1125,6 +1139,11 @@ SECTIONS
    MIO0_SEG(bidw_skybox, 0x0A000000)
    MIO0_SEG(bits_skybox, 0x0A000000)
 
+   // Custom Skyboxes from RM2C. In base repo dummy file exists
+#ifdef RM2C
+   #include "textures/skyboxes/Skybox_Rules.ld"
+#endif
+
    // Texture bins
    MIO0_SEG(fire, 0x09000000)
    MIO0_SEG(spooky, 0x09000000)
@@ -1148,6 +1167,11 @@ SECTIONS
 #undef STUB_LEVEL
 #undef DEFINE_LEVEL
 
+//So RM2C can partially output custom levels instead of forcing all levels to have custom content
+#define DEFINE_LEVEL(folder,_0) CUSTOM_LEVEL(folder)
+   #include "levels/custom_level_defines.h"
+#undef DEFINE_LEVEL
+
    /* 4E9FA0-? [?] */
    BEGIN_SEG(assets, __romPos)
    {
diff --git a/src/audio/data.c b/src/audio/data.c
index 06727c0..71bdd0f 100644
--- a/src/audio/data.c
+++ b/src/audio/data.c
@@ -60,7 +60,7 @@ struct AudioSessionSettings gAudioSessionPresets[18] = {
     { 32000, 16, 1, 0x0A00, 0x47FF, 0x7FFF, 0x3F00, 0x6200, 0x4400, 0x2A80 },
     { 32000, 20, 1, 0x0800, 0x37FF, 0x7FFF, 0x3300, 0x5500, 0x4000, 0x1B00 },
 #else
-    { 32000, 16, 1, 0x0C00, 0x2FFF, 0x7FFF, 0x3A00, 0x6D00, 0x4400, 0x2A00 },
+    { 32000, 16, 1, 0x0C00, 0x2FFF, 0x7FFF, 0x5A00, 0xBD00, 0x6400, 0x4A00 },
     { 32000, 16, 1, 0x0A00, 0x47FF, 0x7FFF, 0x3A00, 0x6D00, 0x4400, 0x2A00 },
     { 32000, 16, 1, 0x1000, 0x2FFF, 0x7FFF, 0x3A00, 0x6D00, 0x4400, 0x2A00 },
     { 32000, 16, 1, 0x0E00, 0x3FFF, 0x7FFF, 0x3A00, 0x6D00, 0x4400, 0x2A00 },
diff --git a/src/audio/data.h b/src/audio/data.h
index ee8b30b..c12d61a 100644
--- a/src/audio/data.h
+++ b/src/audio/data.h
@@ -140,8 +140,8 @@ extern OSMesgQueue *D_SH_80350FA8;
 #define AUDIO_INIT_POOL_SIZE 0x2c00
 #else
 #define UNUSED_COUNT_80333EE8 16
-#define AUDIO_HEAP_SIZE 0x31150
-#define AUDIO_INIT_POOL_SIZE 0x2500
+#define AUDIO_HEAP_SIZE 0x3c150
+#define AUDIO_INIT_POOL_SIZE 0x3500
 #endif
 
 #ifdef VERSION_SH
diff --git a/src/audio/external.c b/src/audio/external.c
index 0053464..8d3ecbe 100644
--- a/src/audio/external.c
+++ b/src/audio/external.c
@@ -2114,10 +2114,6 @@ static u8 begin_background_music_fade(u16 fadeDuration) {
         if (targetVolume != 0xff) {
             seq_player_fade_to_target_volume(SEQ_PLAYER_LEVEL, fadeDuration, targetVolume);
         } else {
-#if defined(VERSION_JP) || defined(VERSION_US)
-            gSequencePlayers[SEQ_PLAYER_LEVEL].volume =
-                sBackgroundMusicDefaultVolume[sCurrentBackgroundMusicSeqId] / 127.0f;
-#endif
             seq_player_fade_to_normal_volume(SEQ_PLAYER_LEVEL, fadeDuration);
         }
     }
diff --git a/src/audio/load.c b/src/audio/load.c
index 7d91de0..77eb0f8 100644
--- a/src/audio/load.c
+++ b/src/audio/load.c
@@ -1086,8 +1086,8 @@ void audio_init() {
 
     // Load bank sets for each sequence
     data = LOAD_DATA(gBankSetsData);
-    gAlBankSets = soundAlloc(&gAudioInitPool, 0x100);
-    audio_dma_copy_immediate((uintptr_t) data, gAlBankSets, 0x100);
+    gAlBankSets = soundAlloc(&gAudioInitPool, 0x200);
+    audio_dma_copy_immediate((uintptr_t) data, gAlBankSets, 0x200);
 #else
     // Load headers for sounds and sequences
     data = LOAD_DATA(gMusicData);
diff --git a/src/buffers/buffers.c b/src/buffers/buffers.c
index 70169a8..6b4d9a4 100644
--- a/src/buffers/buffers.c
+++ b/src/buffers/buffers.c
@@ -5,7 +5,7 @@
 
 ALIGNED8 u8 gDecompressionHeap[0xD000];
 
-ALIGNED16 u8 gAudioHeap[DOUBLE_SIZE_ON_64_BIT(0x32000)];
+ALIGNED16 u8 gAudioHeap[DOUBLE_SIZE_ON_64_BIT(0x40000)];
 
 ALIGNED8 u8 gIdleThreadStack[0x800];
 ALIGNED8 u8 gThread3Stack[0x2000];
diff --git a/src/game/behavior_actions.c b/src/game/behavior_actions.c
index 9e155ae..de3d2e5 100644
--- a/src/game/behavior_actions.c
+++ b/src/game/behavior_actions.c
@@ -76,6 +76,9 @@ static s16 sBooHitRotations[] = {
 #include "behaviors/breakable_wall.inc.c"
 #include "behaviors/kickable_board.inc.c"
 #include "behaviors/tower_door.inc.c"
+#ifdef RM2C
+#include "behaviors/texscroll.inc.c"
+#endif
 #include "behaviors/rotating_platform.inc.c"
 #include "behaviors/koopa_shell_underwater.inc.c"
 #include "behaviors/warp.inc.c"
diff --git a/src/game/behavior_actions.h b/src/game/behavior_actions.h
index 9793917..ca7b61a 100644
--- a/src/game/behavior_actions.h
+++ b/src/game/behavior_actions.h
@@ -1,6 +1,16 @@
 #ifndef BEHAVIOR_ACTIONS_H
 #define BEHAVIOR_ACTIONS_H
 
+#include "types.h"
+
+struct Struct802C0DF0 {
+    u8 unk0;
+    u8 unk1;
+    u8 unk2;
+    u8 model;
+    const BehaviorScript *behavior;
+};
+
 void spawn_mist_particles_variable(s32 count, s32 offsetY, f32 size);
 void bhv_spawn_star_no_level_exit(u32);
 void bhv_star_door_loop_2(void);
@@ -17,6 +27,7 @@ void play_penguin_walking_sound(s32 walk);
 s32 update_angle_from_move_flags(s32 *angle);
 void cur_obj_spawn_strong_wind_particles(s32 windSpread, f32 scale, f32 relPosX, f32 relPosY, f32 relPosZ);
 
+void uv_update_scroll(void);
 void bhv_cap_switch_loop(void);
 void bhv_tiny_star_particles_init(void);
 void bhv_grindel_thwomp_loop(void);
diff --git a/src/game/behaviors/boo.inc.c b/src/game/behaviors/boo.inc.c
index 6bfcc54..333f3a0 100644
--- a/src/game/behaviors/boo.inc.c
+++ b/src/game/behaviors/boo.inc.c
@@ -575,6 +575,15 @@ static void big_boo_act_2(void) {
     }
 }
 
+#ifdef RM2C
+static void big_boo_spawn_ghost_hunt_star(void) {
+    spawn_default_star(GhostHuntBooStarPos);
+}
+
+static void big_boo_spawn_balcony_star(void) {
+    spawn_default_star(BalconyBooStarPos);
+}
+#else
 static void big_boo_spawn_ghost_hunt_star(void) {
     spawn_default_star(980.0f, 1100.0f, 250.0f);
 }
@@ -582,11 +591,16 @@ static void big_boo_spawn_ghost_hunt_star(void) {
 static void big_boo_spawn_balcony_star(void) {
     spawn_default_star(700.0f, 3200.0f, 1900.0f);
 }
+#endif
 
 static void big_boo_spawn_merry_go_round_star(void) {
     struct Object *merryGoRound;
 
+	#ifdef RM2C
+    spawn_default_star(MerryGoRoundStarPos);
+	#else
     spawn_default_star(-1600.0f, -2100.0f, 205.0f);
+	#endif
 
     merryGoRound = cur_obj_nearest_object_with_behavior(bhvMerryGoRound);
 
diff --git a/src/game/behaviors/bully.inc.c b/src/game/behaviors/bully.inc.c
index 6d5fc5c..1fe15b2 100644
--- a/src/game/behaviors/bully.inc.c
+++ b/src/game/behaviors/bully.inc.c
@@ -214,9 +214,17 @@ void bully_act_level_death(void) {
             spawn_mist_particles();
 
             if (o->oBullySubtype == BULLY_STYPE_CHILL) {
-                spawn_default_star(130.0f, 1600.0f, -4335.0f);
+				#ifdef RM2C
+					spawn_default_star(ChillBullyStarPos);
+                #else
+                    spawn_default_star(130.0f, 1600.0f, -4335.0f);
+                #endif
             } else {
-                spawn_default_star(0, 950.0f, -6800.0f);
+                #ifdef RM2C
+					spawn_default_star(BigBullyStarPos);
+				#else
+					spawn_default_star(0, 950.0f, -6800.0f);
+				#endif
                 spawn_object_abs_with_rot(o, 0, MODEL_NONE, bhvLllTumblingBridge,
                                           0, 154, -5631, 0, 0, 0);
             }
diff --git a/src/game/behaviors/exclamation_box.inc.c b/src/game/behaviors/exclamation_box.inc.c
index 714400a..866c54e 100644
--- a/src/game/behaviors/exclamation_box.inc.c
+++ b/src/game/behaviors/exclamation_box.inc.c
@@ -12,14 +12,9 @@ struct ObjectHitbox sExclamationBoxHitbox = {
     /* hurtboxHeight:     */ 30,
 };
 
-struct Struct802C0DF0 {
-    u8 unk0;
-    u8 unk1;
-    u8 unk2;
-    u8 model;
-    const BehaviorScript *behavior;
-};
-
+#ifdef RM2C
+extern struct Struct802C0DF0 sExclamationBoxContents[];//#include "Item_Box.inc.c"
+#else
 struct Struct802C0DF0 sExclamationBoxContents[] = {
     { 0, 0, 0, MODEL_MARIOS_WING_CAP, bhvWingCap },
     { 1, 0, 0, MODEL_MARIOS_METAL_CAP, bhvMetalCap },
@@ -38,6 +33,7 @@ struct Struct802C0DF0 sExclamationBoxContents[] = {
     { 14, 0, 5, MODEL_STAR, bhvSpawnedStar },
     { 99, 0, 0, 0, NULL }
 };
+#endif
 
 void bhv_rotating_exclamation_box_loop(void) {
     if (o->parentObj->oAction != 1) {
diff --git a/src/game/behaviors/eyerok.inc.c b/src/game/behaviors/eyerok.inc.c
index 89799af..13faab8 100644
--- a/src/game/behaviors/eyerok.inc.c
+++ b/src/game/behaviors/eyerok.inc.c
@@ -119,7 +119,11 @@ static void eyerok_boss_act_fight(void) {
 static void eyerok_boss_act_die(void) {
     if (o->oTimer == 60) {
         if (cur_obj_update_dialog_with_cutscene(MARIO_DIALOG_LOOK_UP, DIALOG_FLAG_NONE, CUTSCENE_DIALOG, DIALOG_118)) {
+            #ifdef RM2C
+            spawn_default_star(EyerockStarPos);
+            #else
             spawn_default_star(0.0f, -900.0f, -3700.0f);
+            #endif
         } else {
             o->oTimer--;
         }
diff --git a/src/game/behaviors/fire_piranha_plant.inc.c b/src/game/behaviors/fire_piranha_plant.inc.c
index be1ea9c..dd9a147 100644
--- a/src/game/behaviors/fire_piranha_plant.inc.c
+++ b/src/game/behaviors/fire_piranha_plant.inc.c
@@ -69,7 +69,11 @@ static void fire_piranha_plant_act_hide(void) {
 
             if ((u16)(o->oBehParams >> 16) != 0 && o->oHealth == 0) {
                 if (++sNumKilledFirePiranhaPlants == 5) {
+					#ifdef RM2C
+                    spawn_default_star(BigPiranhasStarPos);
+					#else
                     spawn_default_star(-6300.0f, -1850.0f, -6300.0f);
+					#endif
                 }
 
                 obj_die_if_health_non_positive();
diff --git a/src/game/behaviors/hidden_star.inc.c b/src/game/behaviors/hidden_star.inc.c
index 9dd2c1e..033bb5c 100644
--- a/src/game/behaviors/hidden_star.inc.c
+++ b/src/game/behaviors/hidden_star.inc.c
@@ -59,7 +59,7 @@ void bhv_bowser_course_red_coin_star_loop(void) {
 
     switch (o->oAction) {
         case 0:
-            if (o->oHiddenStarTriggerCounter == 8) {
+            if (o->oHiddenStarTriggerCounter == REDS_REQ) {
                 o->oAction = 1;
             }
             break;
diff --git a/src/game/behaviors/king_bobomb.inc.c b/src/game/behaviors/king_bobomb.inc.c
index f867cdf..e2f7133 100644
--- a/src/game/behaviors/king_bobomb.inc.c
+++ b/src/game/behaviors/king_bobomb.inc.c
@@ -30,7 +30,7 @@ void king_bobomb_act_0(void) {
         gSecondCameraFocus = o;
         cur_obj_init_animation_with_sound(5);
         cur_obj_set_pos_to_home();
-        o->oHealth = 3;
+        o->oHealth = KING_BOMB_HEALTH;
 
         if (cur_obj_can_mario_activate_textbox_2(500.0f, 100.0f)) {
             o->oSubAction++;
@@ -76,8 +76,8 @@ void king_bobomb_act_2(void) {
         }
 
         if (o->oKingBobombUnk108 == 0) {
-            o->oForwardVel = 3.0f;
-            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x100);
+            o->oForwardVel = KING_BOMB_FVEL;
+            cur_obj_rotate_yaw_toward(o->oAngleToMario, KING_BOMB_YAWVEL);
         } else {
             o->oForwardVel = 0.0f;
             o->oKingBobombUnk108--;
@@ -214,11 +214,10 @@ void king_bobomb_act_7(void) {
         spawn_mist_particles_variable(0, 0, 200.0f);
         spawn_triangle_break_particles(20, MODEL_DIRT_ANIMATION, 3.0f, 4);
         cur_obj_shake_screen(SHAKE_POS_SMALL);
-#ifndef VERSION_JP
-        cur_obj_spawn_star_at_y_offset(2000.0f, 4500.0f, -4500.0f, 200.0f);
+#ifdef RM2C
+        cur_obj_spawn_star_at_y_offset(KingBobOmbStarPos, 200.0f);
 #else
-        o->oPosY += 100.0f;
-        spawn_default_star(2000.0f, 4500.0f, -4500.0f);
+        cur_obj_spawn_star_at_y_offset(2000.0f, 4500.0f, -4500.0f, 200.0f);
 #endif
         o->oAction = 8;
     }
diff --git a/src/game/behaviors/klepto.inc.c b/src/game/behaviors/klepto.inc.c
index 3cf3369..48c93fe 100644
--- a/src/game/behaviors/klepto.inc.c
+++ b/src/game/behaviors/klepto.inc.c
@@ -377,7 +377,11 @@ void bhv_klepto_update(void) {
             || o->oAnimState == KLEPTO_ANIM_STATE_HOLDING_TRANSPARENT_STAR
             #endif
             ) {
+                #ifdef RM2C
+                spawn_default_star(KleptoStarPos);
+                #else
                 spawn_default_star(-5550.0f, 300.0f, -930.0f);
+                #endif
             }
 
             o->oAnimState = KLEPTO_ANIM_STATE_HOLDING_NOTHING;
diff --git a/src/game/behaviors/koopa.inc.c b/src/game/behaviors/koopa.inc.c
index 04b345c..a1ec1fa 100644
--- a/src/game/behaviors/koopa.inc.c
+++ b/src/game/behaviors/koopa.inc.c
@@ -60,10 +60,19 @@ struct KoopaTheQuickProperties {
 /**
  * Properties for the BoB race and the THI race.
  */
+#ifdef RM2C
+//grab trajectory from Trajectories.inc.c and star pos from star_pos.inc.c
+static struct KoopaTheQuickProperties sKoopaTheQuickProperties[] = {
+    { DIALOG_005, DIALOG_007, KoopaBoB_path, KoopaBoBStarPos },
+    { DIALOG_009, DIALOG_031, KoopaTHI_path, KoopaTHIStarPos }
+};
+#else
+//vanilla
 static struct KoopaTheQuickProperties sKoopaTheQuickProperties[] = {
     { DIALOG_005, DIALOG_007, bob_seg7_trajectory_koopa, { 3030, 4500, -4600 } },
     { DIALOG_009, DIALOG_031, thi_seg7_trajectory_koopa, { 7100, -1300, -6000 } },
 };
+#endif
 
 /**
  * Initialization function.
@@ -618,11 +627,11 @@ static void koopa_the_quick_act_race(void) {
                         && (o->oPathedPrevWaypointFlags & WAYPOINT_MASK_00FF) < 28) {
                         // Move faster if mario has already finished the race or
                         // cheated by shooting from cannon
-                        o->oKoopaAgility = 8.0f;
+                        o->oKoopaAgility = KOOPA_SPEED_RACE_END;
                     } else if (o->oKoopaTheQuickRaceIndex != KOOPA_THE_QUICK_BOB_INDEX) {
-                        o->oKoopaAgility = 6.0f;
+                        o->oKoopaAgility = KOOPA_SPEED_THI;
                     } else {
-                        o->oKoopaAgility = 4.0f;
+                        o->oKoopaAgility = KOOPA_SPEED_BOB;
                     }
 
                     obj_forward_vel_approach(o->oKoopaAgility * 6.0f * downhillSteepness,
diff --git a/src/game/behaviors/mips.inc.c b/src/game/behaviors/mips.inc.c
index 0aed1ec..17216da 100644
--- a/src/game/behaviors/mips.inc.c
+++ b/src/game/behaviors/mips.inc.c
@@ -12,7 +12,7 @@ void bhv_mips_init(void) {
     u8 starFlags = save_file_get_star_flags(gCurrSaveFileNum - 1, COURSE_NUM_TO_INDEX(COURSE_NONE));
 
     // If the player has >= 15 stars and hasn't collected first MIPS star...
-    if (save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1) >= 15
+    if (save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1) >= MIPS1_STAR_REQ
         && !(starFlags & SAVE_FLAG_TO_STAR_FLAG(SAVE_FLAG_COLLECTED_MIPS_STAR_1))) {
         o->oBehParams2ndByte = 0;
 #ifndef VERSION_JP
@@ -20,7 +20,7 @@ void bhv_mips_init(void) {
 #endif
     }
     // If the player has >= 50 stars and hasn't collected second MIPS star...
-    else if (save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1) >= 50
+    else if (save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1) >= MIPS2_STAR_REQ
              && !(starFlags & SAVE_FLAG_TO_STAR_FLAG(SAVE_FLAG_COLLECTED_MIPS_STAR_2))) {
         o->oBehParams2ndByte = 1;
 #ifndef VERSION_JP
diff --git a/src/game/behaviors/mr_i.inc.c b/src/game/behaviors/mr_i.inc.c
index f50fb43..8463bfe 100644
--- a/src/game/behaviors/mr_i.inc.c
+++ b/src/game/behaviors/mr_i.inc.c
@@ -140,7 +140,11 @@ void mr_i_act_3(void) {
             o->oMrIScale = sp1C * 0.6;
             if (o->oBehParams2ndByte != 0) {
                 o->oPosY += 100.0f;
+                #ifdef RM2C
+                spawn_default_star(MrIStarPos);
+                #else
                 spawn_default_star(1370, 2000.0f, -320.0f);
+                #endif
                 obj_mark_for_deletion(o);
             } else {
                 cur_obj_spawn_loot_blue_coin();
diff --git a/src/game/behaviors/platform_on_track.inc.c b/src/game/behaviors/platform_on_track.inc.c
index b7c72db..af36e68 100644
--- a/src/game/behaviors/platform_on_track.inc.c
+++ b/src/game/behaviors/platform_on_track.inc.c
@@ -18,6 +18,19 @@ static Collision const *sPlatformOnTrackCollisionModels[] = {
 /**
  * Paths for the different instances of these platforms.
  */
+#ifdef RM2C
+static void const *sPlatformOnTrackPaths[] = {
+    rr_seg7_trajectory_0702EC3C_RM2C_path,
+    rr_seg7_trajectory_0702ECC0_RM2C_path,
+    ccm_seg7_trajectory_0701669C_RM2C_path,
+    bitfs_seg7_trajectory_070159AC_RM2C_path,
+    hmc_seg7_trajectory_0702B86C_RM2C_path,
+    lll_seg7_trajectory_0702856C_RM2C_path,
+    lll_seg7_trajectory_07028660_RM2C_path,
+    rr_seg7_trajectory_0702ED9C_RM2C_path,
+    rr_seg7_trajectory_0702EEE0_RM2C_path,
+};
+#else
 static Trajectory const *sPlatformOnTrackPaths[] = {
     rr_seg7_trajectory_0702EC3C,
     rr_seg7_trajectory_0702ECC0,
@@ -29,6 +42,7 @@ static Trajectory const *sPlatformOnTrackPaths[] = {
     rr_seg7_trajectory_0702ED9C,
     rr_seg7_trajectory_0702EEE0,
 };
+#endif
 
 /**
  * Despawn all track balls and enter the init action.
diff --git a/src/game/behaviors/racing_penguin.inc.c b/src/game/behaviors/racing_penguin.inc.c
index 21639ec..1cf0148 100644
--- a/src/game/behaviors/racing_penguin.inc.c
+++ b/src/game/behaviors/racing_penguin.inc.c
@@ -38,8 +38,13 @@ static void racing_penguin_act_show_init_text(void) {
         child = cur_obj_nearest_object_with_behavior(bhvPenguinRaceShortcutCheck);
         child->parentObj = o;
 
+		#ifdef RM2C
         o->oPathedStartWaypoint = o->oPathedPrevWaypoint =
+            segmented_to_virtual(ccm_seg7_trajectory_penguin_race_RM2C_path);
+		#else
+			o->oPathedStartWaypoint = o->oPathedPrevWaypoint =
             segmented_to_virtual(ccm_seg7_trajectory_penguin_race);
+		#endif
         o->oPathedPrevWaypointFlags = 0;
 
         o->oAction = RACING_PENGUIN_ACT_PREPARE_FOR_RACE;
@@ -147,8 +152,8 @@ static void racing_penguin_act_show_final_text(void) {
             o->oTimer = 0;
         }
     } else if (o->oRacingPenguinMarioWon) {
-#ifdef VERSION_JP
-        spawn_default_star(-7339.0f, -5700.0f, -6774.0f);
+#ifdef RM2C
+        cur_obj_spawn_star_at_y_offset(RacingPenguinStarPos, 200.0f);
 #else
         cur_obj_spawn_star_at_y_offset(-7339.0f, -5700.0f, -6774.0f, 200.0f);
 #endif
@@ -194,8 +199,16 @@ void bhv_penguin_race_finish_line_update(void) {
     }
 }
 
+//This is used as a 2d camera object in hacks
+#ifdef RM2C
+void bhv_penguin_race_shortcut_check_update(void) {
+	gMarioState->pos[0] = 0.0f;
+	gCurrentArea->camera->mode = CAMERA_MODE_2_DIRECTIONS;
+}
+#else
 void bhv_penguin_race_shortcut_check_update(void) {
     if (o->oDistanceToMario < 500.0f) {
         o->parentObj->oRacingPenguinMarioCheated = TRUE;
     }
 }
+#endif
diff --git a/src/game/behaviors/red_coin.inc.c b/src/game/behaviors/red_coin.inc.c
index 6c4ef8e..89838d5 100644
--- a/src/game/behaviors/red_coin.inc.c
+++ b/src/game/behaviors/red_coin.inc.c
@@ -61,7 +61,7 @@ void bhv_red_coin_loop(void) {
             create_sound_spawner(SOUND_GENERAL_RED_COIN);
 #endif
             // Spawn the orange number counter, as long as it isn't the last coin.
-            if (o->parentObj->oHiddenStarTriggerCounter != 8) {
+            if (o->parentObj->oHiddenStarTriggerCounter < REDS_REQ) {
                 spawn_orange_number(o->parentObj->oHiddenStarTriggerCounter, 0, 0, 0);
             }
 
diff --git a/src/game/behaviors/spawn_star.inc.c b/src/game/behaviors/spawn_star.inc.c
index ed74da3..f961032 100644
--- a/src/game/behaviors/spawn_star.inc.c
+++ b/src/game/behaviors/spawn_star.inc.c
@@ -172,7 +172,7 @@ void bhv_hidden_red_coin_star_loop(void) {
     gRedCoinsCollected = o->oHiddenStarTriggerCounter;
     switch (o->oAction) {
         case 0:
-            if (o->oHiddenStarTriggerCounter == 8) {
+            if (o->oHiddenStarTriggerCounter == REDS_REQ) {
                 o->oAction = 1;
             }
             break;
diff --git a/src/game/behaviors/texscroll.inc.c b/src/game/behaviors/texscroll.inc.c
new file mode 100644
index 0000000..2409491
--- /dev/null
+++ b/src/game/behaviors/texscroll.inc.c
@@ -0,0 +1,146 @@
+#include "engine/math_util.h"
+
+/* SCROLLING BHVS */
+#define SCROLL_X 0
+#define SCROLL_Y 1
+#define SCROLL_Z 2
+#define SCROLL_UV_X 4
+#define SCROLL_UV_Y 5
+
+/* SCROLLING TYPES */
+#define MODE_SCROLL_UV 0
+#define MODE_SCROLL_SINE 1
+#define MODE_SCROLL_JUMP 2
+
+// typedef struct {
+// #ifndef GBI_FLOATS
+	// short		ob[3];	/* x, y, z */
+// #else
+	// float		ob[3];	/* x, y, z */
+// #endif
+	// unsigned short	flag;
+	// short		tc[2];	/* texture coord */
+	// signed char	n[3];	/* normal */
+	// unsigned char   a;      /* alpha  */
+// } Vtx_tn;
+
+// typedef union {
+    // Vtx_t		v;  /* Use this one for colors  */
+    // Vtx_tn              n;  /* Use this one for normals */
+    // long long int	force_structure_alignment;
+// } Vtx;
+extern Vtx *ScrollTargets[];
+#ifndef F3DEX_GBI_2E
+static void shift_UV_NORMAL(u32 vert, u16 vertcount, s16 speed, u16 bhv) {
+    u16 overflownum = 0x1000;
+    u32 i;
+    Vtx *verts = segmented_to_virtual(ScrollTargets[vert]);
+	u16 *Varray;
+	s16 correction=0;
+	if (verts[0].n.flag * absi(speed) > overflownum) {
+		correction = (u16) overflownum * signum_positive(speed);
+		verts[0].n.flag = 0;
+	}
+    for (i = 0; i < vertcount; i++) {
+		Varray = &verts[i].n;
+		if (correction==0)
+			Varray[bhv] += speed;
+		else
+			Varray[bhv] -= correction;
+    }
+    verts[0].n.flag++;
+}
+
+static void shift_UV_SINE(u32 vert, u16 vertcount, s16 speed, u16 bhv) {
+    u32 i;
+    Vtx *verts = segmented_to_virtual(ScrollTargets[vert]);
+	u16 cycle = o->oFaceAngleRoll*180/ 0x8000;
+	u16 *Varray;
+    for (i = 0; i < vertcount; i++) {
+		Varray = &verts[i].n;
+        Varray[bhv] += sins(verts[0].n.flag) * speed;
+    }
+    verts[0].n.flag += cycle * 0x20;
+}
+
+static void shift_uv(u8 scrollbhv, u32 vert, u16 vertcount, s16 spd, u16 scrolltype) {
+    switch (scrollbhv) {
+        case MODE_SCROLL_UV:
+			shift_UV_NORMAL(vert, vertcount, spd, scrolltype);
+			break;
+        case MODE_SCROLL_SINE:
+        case MODE_SCROLL_JUMP:
+			shift_UV_SINE(vert, vertcount, spd, scrolltype);
+            break;
+    }
+}
+#else
+
+static void shift_UV_NORMAL(u32 vert, u16 vertcount, s16 speed, u16 bhv) {
+	u16 overflownum = 0x1000;
+    u16 i;
+	Vtx *verts = ScrollTargets[vert];
+	u16 correction=0;
+	u16 offset=o->oFaceAnglePitch*180/ 0x8000;
+	vertcount=vertcount+(vertcount-1+offset)/15; // PC has padding between vert arrays that I need to compensate for
+	if (verts[0].n.flag * absi(speed) > overflownum) {
+		correction = overflownum * signum_positive(speed);
+		verts[0].n.flag = 0;
+	}
+	if (bhv<4){
+		for (i = 0; i < vertcount; i++) {
+			if (correction==0){
+				verts[i].n.ob[bhv] += (float) speed;
+			}else
+				verts[i].n.ob[bhv] -= (float) correction;
+		}
+	}
+	else{
+		for (i = 0; i < vertcount; i++) {
+			if (correction==0)
+				verts[i].n.tc[bhv-4] += speed;
+			else
+				verts[i].n.tc[bhv-4] -= correction;
+		}
+	}
+    verts[0].n.flag++;
+	
+}
+
+static void shift_UV_SINE(u32 vert, u16 vertcount, s16 speed, u16 bhv) {
+    u32 i;
+    Vtx *verts = ScrollTargets[vert];
+	u16 cycle = o->oFaceAngleRoll*180/ 0x8000;
+	u16 offset=o->oFaceAnglePitch*180/ 0x8000;
+	vertcount=vertcount+(vertcount-1+offset)/15; // PC has padding between vert arrays that I need to compensate for
+	//float pos
+	if (bhv<4){
+		for (i = 0; i < vertcount; i++) {
+			verts[i].n.ob[bhv] += (float) (sins(verts[0].n.flag) * speed);
+		}
+	}else{
+		for (i = 0; i < vertcount; i++) {
+			verts[i].n.tc[bhv-4] += sins(verts[0].n.flag) * speed;
+		}
+	}
+    verts[0].n.flag += cycle * 0x20;
+}
+
+
+static void shift_uv(u8 scrollbhv, u32 vert, u16 vertcount, s16 spd, u16 scrolltype) {
+    switch (scrollbhv) {
+        case MODE_SCROLL_UV:
+			shift_UV_NORMAL(vert, vertcount, spd, scrolltype);
+			break;
+        case MODE_SCROLL_SINE:
+        case MODE_SCROLL_JUMP:
+			shift_UV_SINE(vert, vertcount, spd, scrolltype);
+            break;
+    }
+}
+#endif
+// format I will use is bparam=addr,z=vert amount,x=spd,y=bhv,ry=type, rz=cycle, rx=offset
+void uv_update_scroll() {
+	shift_uv(/*scrolling type*/ o->oFaceAngleYaw, /*index in vert ptr arr*/ o->oBehParams, 
+	/*number of verts*/ (u16) o->oPosZ, /*speed*/ (s16) o->oPosX, /*type*/ (u16) o->oPosY);
+}
diff --git a/src/game/behaviors/treasure_chest.inc.c b/src/game/behaviors/treasure_chest.inc.c
index 7669011..a41cb66 100644
--- a/src/game/behaviors/treasure_chest.inc.c
+++ b/src/game/behaviors/treasure_chest.inc.c
@@ -166,7 +166,11 @@ void bhv_treasure_chest_jrb_loop(void) {
         case 1:
             if (o->oTimer == 60) {
                 spawn_mist_particles();
+				#ifdef RM2C
+                spawn_default_star(TreasureChestStarPos);
+				#else
                 spawn_default_star(-1800.0f, -2500.0f, -1700.0f);
+				#endif
                 o->oAction = 2;
             }
             break;
diff --git a/src/game/behaviors/tuxie.inc.c b/src/game/behaviors/tuxie.inc.c
index 7bd80d7..8afd411 100644
--- a/src/game/behaviors/tuxie.inc.c
+++ b/src/game/behaviors/tuxie.inc.c
@@ -87,10 +87,10 @@ void tuxies_mother_act_1(void) {
                 o->prevObj->OBJECT_FIELD_S32(o->oInteractionSubtype) &= ~INT_SUBTYPE_DROP_IMMEDIATELY;
 #endif
                 obj_set_behavior(o->prevObj, bhvUnused20E0);
-#ifndef VERSION_JP
-                cur_obj_spawn_star_at_y_offset(3167.0f, -4300.0f, 5108.0f, 200.0f);
+#ifdef RM2C
+                cur_obj_spawn_star_at_y_offset(TuxieMotherStarPos, 200.0f);
 #else
-                spawn_default_star(3500.0f, -4300.0f, 4650.0f);
+                cur_obj_spawn_star_at_y_offset(3167.0f, -4300.0f, 5108.0f, 200.0f);
 #endif
                 o->oAction = 2;
             }
diff --git a/src/game/behaviors/whomp.inc.c b/src/game/behaviors/whomp.inc.c
index 3b65ef2..d479c91 100644
--- a/src/game/behaviors/whomp.inc.c
+++ b/src/game/behaviors/whomp.inc.c
@@ -30,7 +30,7 @@ void whomp_init(void) {
                 seq_player_lower_volume(SEQ_PLAYER_LEVEL, 60, 40);
             } else {
                 cur_obj_set_pos_to_home();
-                o->oHealth = 3;
+                o->oHealth = KING_WHOMP_HEALTH;
             }
         } else if (cur_obj_update_dialog_with_cutscene(MARIO_DIALOG_LOOK_UP, 
             DIALOG_FLAG_TURN_TO_MARIO, CUTSCENE_DIALOG, DIALOG_114)) {
@@ -252,7 +252,11 @@ void whomp_die(void) {
             spawn_triangle_break_particles(20, MODEL_DIRT_ANIMATION, 3.0f, 4);
             cur_obj_shake_screen(SHAKE_POS_SMALL);
             o->oPosY += 100.0f;
+			#ifdef RM2C
+            spawn_default_star(KingWhompStarPos);
+			#else
             spawn_default_star(180.0f, 3880.0f, 340.0f);
+            #endif
             cur_obj_play_sound_2(SOUND_OBJ_KING_WHOMP_DEATH);
             o->oAction = 9;
         }
diff --git a/src/game/behaviors/wiggler.inc.c b/src/game/behaviors/wiggler.inc.c
index da1ae80..89d18ff 100644
--- a/src/game/behaviors/wiggler.inc.c
+++ b/src/game/behaviors/wiggler.inc.c
@@ -355,7 +355,11 @@ static void wiggler_act_shrink(void) {
 
         // 4 is the default scale, so shrink to 1/4 of regular size
         if (approach_f32_ptr(&o->header.gfx.scale[0], 1.0f, 0.1f)) {
+			#ifdef RM2C
+            spawn_default_star(WigglerStarPos);
+			#else
             spawn_default_star(0.0f, 2048.0f, 0.0f);
+			#endif
             o->oAction = WIGGLER_ACT_FALL_THROUGH_FLOOR;
         }
 
diff --git a/src/game/camera.c b/src/game/camera.c
index aa1f6ff..a39d055 100644
--- a/src/game/camera.c
+++ b/src/game/camera.c
@@ -463,7 +463,6 @@ s32 update_boss_fight_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_parallel_tracking_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_fixed_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_8_directions_camera(struct Camera *c, Vec3f, Vec3f);
-s32 update_slide_or_0f_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_spiral_stairs_camera(struct Camera *c, Vec3f, Vec3f);
 
 typedef s32 (*CameraTransition)(struct Camera *c, Vec3f, Vec3f);
@@ -483,7 +482,7 @@ CameraTransition sModeTransitions[] = {
     update_parallel_tracking_camera,
     update_fixed_camera,
     update_8_directions_camera,
-    update_slide_or_0f_camera,
+    update_8_directions_camera, // duplicate for 2D camera
     update_mario_camera,
     update_spiral_stairs_camera
 };
@@ -962,9 +961,9 @@ s32 update_8_directions_camera(struct Camera *c, Vec3f focus, Vec3f pos) {
     calc_y_to_curr_floor(&posY, 1.f, 200.f, &focusY, 0.9f, 200.f);
     focus_on_mario(focus, pos, posY + yOff, focusY + yOff, sLakituDist + baseDist, pitch, camYaw);
     pan_ahead_of_player(c);
-    if (gCurrLevelArea == AREA_DDD_SUB) {
-        camYaw = clamp_positions_and_find_yaw(pos, focus, 6839.f, 995.f, 5994.f, -3945.f);
-    }
+    //if (gCurrLevelArea == AREA_DDD_SUB) {
+    //    camYaw = clamp_positions_and_find_yaw(pos, focus, 6839.f, 995.f, 5994.f, -3945.f);
+    //}
 
     return camYaw;
 }
@@ -1191,6 +1190,24 @@ void mode_radial_camera(struct Camera *c) {
     pan_ahead_of_player(c);
 }
 
+/**
+ * A mode that only has 1 camera angle.
+ */
+void mode_2_directions_camera(struct Camera *c) {
+    Vec3f pos;
+    s16 oldAreaYaw = sAreaYaw;
+
+    radial_camera_input(c, 0.f);
+
+    lakitu_zoom(400.f, 0x900);
+    c->nextYaw = update_8_directions_camera(c, c->focus, pos);
+	s8DirModeYawOffset=0x4000;
+    c->pos[0] = pos[0];
+    c->pos[2] = pos[2];
+    sAreaYawChange = sAreaYaw - oldAreaYaw;
+    set_camera_height(c, pos[1]);
+}
+
 /**
  * A mode that only has 8 camera angles, 45 degrees apart
  */
@@ -1205,10 +1222,23 @@ void mode_8_directions_camera(struct Camera *c) {
         s8DirModeYawOffset += DEGREES(45);
         play_sound_cbutton_side();
     }
-    if (gPlayer1Controller->buttonPressed & L_CBUTTONS) {
+    else if (gPlayer1Controller->buttonPressed & L_CBUTTONS) {
         s8DirModeYawOffset -= DEGREES(45);
         play_sound_cbutton_side();
     }
+	// extra functionality
+    else if (gPlayer1Controller->buttonPressed & U_JPAD) {
+        s8DirModeYawOffset = -gMarioState->faceAngle[1]-0x8000;
+    }
+    else if (gPlayer1Controller->buttonDown & L_JPAD) {
+        s8DirModeYawOffset -= DEGREES(2);
+    }
+    else if (gPlayer1Controller->buttonDown & R_JPAD) {
+        s8DirModeYawOffset += DEGREES(2);
+    }
+    else if (gPlayer1Controller->buttonPressed & D_JPAD) {
+        s8DirModeYawOffset = s8DirModeYawOffset&0xE000;
+    }
 
     lakitu_zoom(400.f, 0x900);
     c->nextYaw = update_8_directions_camera(c, c->focus, pos);
@@ -2261,7 +2291,8 @@ s16 update_default_camera(struct Camera *c) {
             yawVel = 0;
         }
         if (yawVel != 0 && get_dialog_id() == DIALOG_NONE) {
-            camera_approach_s16_symmetric_bool(&yaw, yawGoal, yawVel);
+            // stop mario cam from swinging behind mario
+            //camera_approach_s16_symmetric_bool(&yaw, yawGoal, yawVel);
         }
     }
 
@@ -3079,7 +3110,7 @@ void update_camera(struct Camera *c) {
 #endif
     ) {
         // Only process R_TRIG if 'fixed' is not selected in the menu
-        if (cam_select_alt_mode(0) == CAM_SELECTION_MARIO) {
+        if (cam_select_alt_mode(0) == CAM_SELECTION_MARIO && c->mode != CAMERA_MODE_2_DIRECTIONS) {
             if (gPlayer1Controller->buttonPressed & R_TRIG) {
                 if (set_cam_angle(0) == CAM_ANGLE_LAKITU) {
                     set_cam_angle(CAM_ANGLE_MARIO);
@@ -3185,6 +3216,10 @@ void update_camera(struct Camera *c) {
                     mode_8_directions_camera(c);
                     break;
 
+                case CAMERA_MODE_2_DIRECTIONS:
+                    mode_2_directions_camera(c);
+                    break;
+
                 case CAMERA_MODE_RADIAL:
                     mode_radial_camera(c);
                     break;
diff --git a/src/game/camera.h b/src/game/camera.h
index c85a5c4..367e6ab 100644
--- a/src/game/camera.h
+++ b/src/game/camera.h
@@ -110,6 +110,7 @@
 #define CAMERA_MODE_PARALLEL_TRACKING 0x0C
 #define CAMERA_MODE_FIXED             0x0D
 #define CAMERA_MODE_8_DIRECTIONS      0x0E // AKA Parallel Camera, Bowser Courses & Rainbow Ride
+#define CAMERA_MODE_2_DIRECTIONS      0x0F // For 2D levels
 #define CAMERA_MODE_FREE_ROAM         0x10
 #define CAMERA_MODE_SPIRAL_STAIRS     0x11
 
diff --git a/src/game/geo_misc.h b/src/game/geo_misc.h
index c43b430..76ceb03 100644
--- a/src/game/geo_misc.h
+++ b/src/game/geo_misc.h
@@ -12,6 +12,18 @@ enum FlyingCarpetState {
 
 extern s8 gFlyingCarpetState;
 
+#ifdef RM2C
+#define MIO0_SEG(name, addr) \
+    name##_Index, \
+
+
+enum Custom_Skybox_Indices{
+#include "textures/skyboxes/Skybox_Rules.ld"
+};
+
+#undef MIO0_SEG
+#endif
+
 #ifndef GBI_FLOATS
 extern void make_vertex(
     Vtx *vtx, s32 n, s16 x, s16 y, s16 z, s16 tx, s16 ty, u8 r, u8 g, u8 b, u8 a
diff --git a/src/game/hud.c b/src/game/hud.c
index a5a5ac2..c57c538 100644
--- a/src/game/hud.c
+++ b/src/game/hud.c
@@ -57,8 +57,8 @@ static s16 sPowerMeterStoredHealth;
 
 static struct PowerMeterHUD sPowerMeterHUD = {
     POWER_METER_HIDDEN,
-    140,
-    166,
+    POWER_X,
+    POWER_Y,
     1.0,
 };
 
@@ -307,9 +307,9 @@ void render_hud_power_meter(void) {
  * Renders the amount of lives Mario has.
  */
 void render_hud_mario_lives(void) {
-    print_text(GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(22), HUD_TOP_Y, ","); // 'Mario Head' glyph
-    print_text(GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(38), HUD_TOP_Y, "*"); // 'X' glyph
-    print_text_fmt_int(GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(54), HUD_TOP_Y, "%d", gHudDisplay.lives);
+    print_text(HUD_LIVES_MARIO_X, HUD_LIVES_MARIO_Y, ","); // 'Mario Head' glyph
+    print_text(HUD_LIVES_CROSS_X, HUD_LIVES_CROSS_Y, "*"); // 'X' glyph
+    print_text_fmt_int(HUD_LIVES_NUM_X, HUD_LIVES_NUM_Y, "%d", gHudDisplay.lives);
 }
 
 /**
@@ -321,12 +321,6 @@ void render_hud_coins(void) {
     print_text_fmt_int(198, HUD_TOP_Y, "%d", gHudDisplay.coins);
 }
 
-#ifdef VERSION_JP
-#define HUD_STARS_X 73
-#else
-#define HUD_STARS_X 78
-#endif
-
 /**
  * Renders the amount of stars collected.
  * Disables "X" glyph when Mario has 100 stars or more.
@@ -342,12 +336,12 @@ void render_hud_stars(void) {
         showX = 1;
     }
 
-    print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(HUD_STARS_X), HUD_TOP_Y, "-"); // 'Star' glyph
+    print_text(HUD_STARS_X, HUD_STARS_Y, "-"); // 'Star' glyph
     if (showX == 1) {
-        print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(HUD_STARS_X) + 16, HUD_TOP_Y, "*"); // 'X' glyph
+        print_text(HUD_STARS_CROSS_X, HUD_STARS_CROSS_Y, "*"); // 'X' glyph
     }
-    print_text_fmt_int((showX * 14) + GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(HUD_STARS_X - 16),
-                       HUD_TOP_Y, "%d", gHudDisplay.stars);
+    print_text_fmt_int((showX * 14) + HUD_STARS_NUM_X,
+                       HUD_STARS_NUM_Y, "%d", gHudDisplay.stars);
 }
 
 /**
@@ -375,26 +369,26 @@ void render_hud_timer(void) {
 #ifdef VERSION_EU
     switch (eu_get_language()) {
         case LANGUAGE_ENGLISH:
-            print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(150), 185, "TIME");
+            print_text(HUD_TIME_X, HUD_TIME_Y, "TIME");
             break;
         case LANGUAGE_FRENCH:
-            print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(155), 185, "TEMPS");
+            print_text(HUD_TIME_X+5, HUD_TIME_Y, "TEMPS");
             break;
         case LANGUAGE_GERMAN:
-            print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(150), 185, "ZEIT");
+            print_text(HUD_TIME_X, HUD_TIME_Y, "ZEIT");
             break;
     }
 #else
-    print_text(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(150), 185, "TIME");
+    print_text(HUD_TIME_X, HUD_TIME_Y, "TIME");
 #endif
 
-    print_text_fmt_int(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(91), 185, "%0d", timerMins);
-    print_text_fmt_int(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(71), 185, "%02d", timerSecs);
-    print_text_fmt_int(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(37), 185, "%d", timerFracSecs);
+    print_text_fmt_int(HUD_TIME_MIN_X, HUD_TIME_Y, "%0d", timerMins);
+    print_text_fmt_int(HUD_TIME_SEC_X, HUD_TIME_Y, "%02d", timerSecs);
+    print_text_fmt_int(HUD_TIME_FSEC_X, HUD_TIME_Y, "%d", timerFracSecs);
 
     gSPDisplayList(gDisplayListHead++, dl_hud_img_begin);
-    render_hud_tex_lut(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(81), 32, (*hudLUT)[GLYPH_APOSTROPHE]);
-    render_hud_tex_lut(GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(46), 32, (*hudLUT)[GLYPH_DOUBLE_QUOTE]);
+    render_hud_tex_lut(HUD_TIME_MIN_A_X, 32, (*hudLUT)[GLYPH_APOSTROPHE]);
+    render_hud_tex_lut(HUD_TIME_SEC_AA_X, 32, (*hudLUT)[GLYPH_DOUBLE_QUOTE]);
     gSPDisplayList(gDisplayListHead++, dl_hud_img_end);
 }
 
@@ -492,15 +486,15 @@ void render_hud(void) {
         }
 #endif
 
-        if (hudDisplayFlags & HUD_DISPLAY_FLAG_LIVES) {
+        if (hudDisplayFlags & HUD_DISPLAY_FLAG_LIVES && SHOW_LIVES) {
             render_hud_mario_lives();
         }
 
-        if (hudDisplayFlags & HUD_DISPLAY_FLAG_COIN_COUNT) {
+        if (hudDisplayFlags & HUD_DISPLAY_FLAG_COIN_COUNT && SHOW_COINS) {
             render_hud_coins();
         }
 
-        if (hudDisplayFlags & HUD_DISPLAY_FLAG_STAR_COUNT) {
+        if (hudDisplayFlags & HUD_DISPLAY_FLAG_STAR_COUNT && SHOW_STARS) {
             render_hud_stars();
         }
 
@@ -514,7 +508,7 @@ void render_hud(void) {
             render_hud_camera_status();
         }
 
-        if (hudDisplayFlags & HUD_DISPLAY_FLAG_TIMER) {
+        if (hudDisplayFlags & HUD_DISPLAY_FLAG_TIMER && SHOW_TIME) {
             render_hud_timer();
         }
     }
diff --git a/src/game/interaction.c b/src/game/interaction.c
index 87fd514..2ff2845 100644
--- a/src/game/interaction.c
+++ b/src/game/interaction.c
@@ -758,8 +758,8 @@ u32 interact_coin(struct MarioState *m, UNUSED u32 interactType, struct Object *
 
     o->oInteractStatus = INT_STATUS_INTERACTED;
 
-    if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
-        && m->numCoins >= 100) {
+    if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < COINS_REQ_COINSTAR
+        && m->numCoins >= COINS_REQ_COINSTAR) {
         bhv_spawn_star_no_level_exit(6);
     }
 #ifdef RUMBLE_FEEDBACK
@@ -1639,17 +1639,17 @@ u32 interact_cap(struct MarioState *m, UNUSED u32 interactType, struct Object *o
 
         switch (capFlag) {
             case MARIO_VANISH_CAP:
-                capTime = 600;
+                capTime = VC_TIME / 2;
                 capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
                 break;
 
             case MARIO_METAL_CAP:
-                capTime = 600;
+                capTime = MC_TIME / 2;
                 capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP);
                 break;
 
             case MARIO_WING_CAP:
-                capTime = 1800;
+                capTime = WC_TIME / 2;
                 capMusic = SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP);
                 break;
         }
@@ -1910,9 +1910,13 @@ void pss_end_slide(struct MarioState *m) {
 #endif
     if (gPssSlideStarted) {
         u16 slideTime = level_control_timer(TIMER_CONTROL_STOP);
-        if (slideTime < 630) {
+        if (slideTime < SLIDE_TIME) {
             m->marioObj->oBehParams = (1 << 24);
+			#ifdef RM2C
+            spawn_default_star(PssSlideStarPos);
+			#else
             spawn_default_star(-6358.0f, -4300.0f, 4700.0f);
+            #endif
         }
         gPssSlideStarted = FALSE;
     }
diff --git a/src/game/level_update.c b/src/game/level_update.c
index 8f28b73..93c6444 100644
--- a/src/game/level_update.c
+++ b/src/game/level_update.c
@@ -325,17 +325,17 @@ void set_mario_initial_cap_powerup(struct MarioState *m) {
     switch (capCourseIndex) {
         case COURSE_COTMC - COURSE_CAP_COURSES:
             m->flags |= MARIO_METAL_CAP | MARIO_CAP_ON_HEAD;
-            m->capTimer = 600;
+            m->capTimer = MC_LEVEL_TIME / 2;
             break;
 
         case COURSE_TOTWC - COURSE_CAP_COURSES:
             m->flags |= MARIO_WING_CAP | MARIO_CAP_ON_HEAD;
-            m->capTimer = 1200;
+            m->capTimer = WC_LEVEL_TIME / 2;
             break;
 
         case COURSE_VCUTM - COURSE_CAP_COURSES:
             m->flags |= MARIO_VANISH_CAP | MARIO_CAP_ON_HEAD;
-            m->capTimer = 600;
+            m->capTimer = VC_LEVEL_TIME / 2;
             break;
     }
 }
@@ -778,7 +778,7 @@ s16 level_trigger_warp(struct MarioState *m, s32 warpOp) {
                 break;
 
             case WARP_OP_DEATH:
-                if (m->numLives == 0) {
+                if (m->numLives == 0 && INFINITE_LIVES) {
                     sDelayedWarpOp = WARP_OP_GAME_OVER;
                 }
                 sDelayedWarpTimer = 48;
@@ -790,7 +790,7 @@ s16 level_trigger_warp(struct MarioState *m, s32 warpOp) {
             case WARP_OP_WARP_FLOOR:
                 sSourceWarpNodeId = WARP_NODE_WARP_FLOOR;
                 if (area_get_warp_node(sSourceWarpNodeId) == NULL) {
-                    if (m->numLives == 0) {
+                    if (m->numLives == 0 && !INFINITE_LIVES) {
                         sDelayedWarpOp = WARP_OP_GAME_OVER;
                     } else {
                         sSourceWarpNodeId = WARP_NODE_DEATH;
@@ -1068,7 +1068,7 @@ s32 play_mode_paused(void) {
         if (gDebugLevelSelect) {
             fade_into_special_warp(-9, 1);
         } else {
-            initiate_warp(LEVEL_CASTLE, 1, 0x1F, 0);
+            initiate_warp(EXIT_COURSE, 0);
             fade_into_special_warp(0, 0);
             gSavedCourseNum = COURSE_NONE;
         }
diff --git a/src/game/mario.c b/src/game/mario.c
index fd3a4b5..d33360a 100644
--- a/src/game/mario.c
+++ b/src/game/mario.c
@@ -1960,7 +1960,7 @@ void init_mario_from_save_file(void) {
         save_file_get_total_star_count(gCurrSaveFileNum - 1, COURSE_MIN - 1, COURSE_MAX - 1);
     gMarioState->numKeys = 0;
 
-    gMarioState->numLives = 4;
+    gMarioState->numLives = MARIO_START_LIVES;
     gMarioState->health = 0x880;
 
     gMarioState->prevNumStarsForDialog = gMarioState->numStars;
diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
index f49f5b1..8c580c7 100644
--- a/src/game/mario_actions_airborne.c
+++ b/src/game/mario_actions_airborne.c
@@ -98,7 +98,7 @@ s32 check_fall_damage(struct MarioState *m, u32 hardFallAction) {
 	}
 #endif
 
-    if (m->action != ACT_TWIRLING && m->floor->type != SURFACE_BURNING) {
+    if (m->action != ACT_TWIRLING && m->floor->type != SURFACE_BURNING && FALL_DAMAGE) {
         if (m->vel[1] < -55.0f) {
             if (fallHeight > 3000.0f) {
                 m->hurtCounter += (m->flags & MARIO_CAP_ON_HEAD) ? 16 : 24;
@@ -2152,8 +2152,10 @@ s32 mario_execute_airborne_action(struct MarioState *m) {
     if (check_common_airborne_cancels(m)) {
         return TRUE;
     }
-
-    play_far_fall_sound(m);
+    
+    if (FALL_DAMAGE) {
+        play_far_fall_sound(m);
+    }
 
     /* clang-format off */
     switch (m->action) {
diff --git a/src/game/mario_actions_cutscene.c b/src/game/mario_actions_cutscene.c
index eb2f7a4..2927cea 100644
--- a/src/game/mario_actions_cutscene.c
+++ b/src/game/mario_actions_cutscene.c
@@ -52,7 +52,7 @@ static s8 D_8032CBE4 = 0;
 static s8 D_8032CBE8 = 0;
 static s8 D_8032CBEC[7] = { 2, 3, 2, 1, 2, 3, 2 };
 
-static u8 sStarsNeededForDialog[] = { 1, 3, 8, 30, 50, 70 };
+static u8 sStarsNeededForDialog[] = { STAR_MILESTONES };
 
 /**
  * Data for the jumbo star cutscene. It specifies the flight path after triple
@@ -279,7 +279,11 @@ void handle_save_menu(struct MarioState *m) {
             disable_time_stop();
             m->faceAngle[1] += 0x8000;
             // figure out what dialog to show, if we should
-            dialogID = get_star_collection_dialog(m);
+			if (SHOW_STAR_MILESTONES){
+				dialogID = get_star_collection_dialog(m);
+			} else {
+				dialogID = 0;
+			}
             if (dialogID) {
                 play_peachs_jingle();
                 // look up for dialog
@@ -662,7 +666,11 @@ void general_star_dance_handler(struct MarioState *m, s32 isInWater) {
     } else if (m->actionState == 2 && is_anim_at_end(m)) {
         disable_time_stop();
         enable_background_sound();
-        dialogID = get_star_collection_dialog(m);
+		if (SHOW_STAR_MILESTONES){
+			dialogID = get_star_collection_dialog(m);
+		} else {
+			dialogID = 0;
+		}
         if (dialogID) {
             // look up for dialog
             set_mario_action(m, ACT_READING_AUTOMATIC_DIALOG, dialogID);
diff --git a/src/game/mario_misc.c b/src/game/mario_misc.c
index 43153ea..c9cd620 100644
--- a/src/game/mario_misc.c
+++ b/src/game/mario_misc.c
@@ -32,18 +32,6 @@
 #include "extras/bettercamera.h"
 #endif
 
-#define TOAD_STAR_1_REQUIREMENT 12
-#define TOAD_STAR_2_REQUIREMENT 25
-#define TOAD_STAR_3_REQUIREMENT 35
-
-#define TOAD_STAR_1_DIALOG DIALOG_082
-#define TOAD_STAR_2_DIALOG DIALOG_076
-#define TOAD_STAR_3_DIALOG DIALOG_083
-
-#define TOAD_STAR_1_DIALOG_AFTER DIALOG_154
-#define TOAD_STAR_2_DIALOG_AFTER DIALOG_155
-#define TOAD_STAR_3_DIALOG_AFTER DIALOG_156
-
 enum ToadMessageStates {
     TOAD_MESSAGE_FADED,
     TOAD_MESSAGE_OPAQUE,
diff --git a/src/game/moving_texture.c b/src/game/moving_texture.c
index 175b854..5c36aa4 100644
--- a/src/game/moving_texture.c
+++ b/src/game/moving_texture.c
@@ -588,8 +588,13 @@ void *get_quad_collection_from_id(u32 id) {
             return castle_courtyard_movtex_star_statue_water;
         case TTM_MOVTEX_PUDDLE:
             return ttm_movtex_puddle;
-        default:
+        #ifdef RM2C
+		default:
+            return GetRomhackWaterBox(id);
+		#else
+		default:
             return NULL;
+		#endif
     }
 }
 
diff --git a/src/game/moving_texture.h b/src/game/moving_texture.h
index 05858a9..40dfb70 100644
--- a/src/game/moving_texture.h
+++ b/src/game/moving_texture.h
@@ -110,6 +110,10 @@ extern f32 gPaintingMarioYEntry;
 #define MOVTEX_TREADMILL_BIG         (0 | MOVTEX_AREA_TTC)
 #define MOVTEX_TREADMILL_SMALL       (1 | MOVTEX_AREA_TTC)
 
+#ifdef RM2C
+extern void *GetRomhackWaterBox(u32 id);
+#endif
+
 Gfx *geo_wdw_set_initial_water_level(s32 callContext, UNUSED struct GraphNode *node, UNUSED Mat4 mtx);
 Gfx *geo_movtex_pause_control(s32 callContext, UNUSED struct GraphNode *node, UNUSED Mat4 mtx);
 Gfx *geo_movtex_draw_water_regions(s32 callContext, struct GraphNode *node, UNUSED Mat4 mtx);
diff --git a/src/game/obj_behaviors.h b/src/game/obj_behaviors.h
index 9755984..50ef6ee 100644
--- a/src/game/obj_behaviors.h
+++ b/src/game/obj_behaviors.h
@@ -7,6 +7,13 @@
 #include "macros.h"
 #include "types.h"
 
+#ifdef RM2C
+#include "behavior_actions.h"
+extern const Trajectory KoopaBoB_path[];
+extern const Trajectory KoopaTHI_path[]; //#include "Trajectories.inc.c"
+#include "Star_Pos.inc.c" //just defines
+#endif
+
 void set_yoshi_as_not_dead(void);
 s32 coin_step(s16 *collisionFlagsPtr);
 void moving_coin_flicker(void);
diff --git a/src/game/obj_behaviors_2.h b/src/game/obj_behaviors_2.h
index 74c97b2..899b3ae 100644
--- a/src/game/obj_behaviors_2.h
+++ b/src/game/obj_behaviors_2.h
@@ -15,6 +15,19 @@
 #define ATTACK_HANDLER_SPECIAL_HUGE_GOOMBA_WEAKLY_ATTACKED 7
 #define ATTACK_HANDLER_SQUISHED_WITH_BLUE_COIN 8
 
+#ifdef RM2C
+extern const Trajectory rr_seg7_trajectory_0702EC3C_RM2C_path[];
+extern const Trajectory rr_seg7_trajectory_0702ECC0_RM2C_path[];
+extern const Trajectory ccm_seg7_trajectory_0701669C_RM2C_path[];
+extern const Trajectory bitfs_seg7_trajectory_070159AC_RM2C_path[];
+extern const Trajectory hmc_seg7_trajectory_0702B86C_RM2C_path[];
+extern const Trajectory lll_seg7_trajectory_0702856C_RM2C_path[];
+extern const Trajectory lll_seg7_trajectory_07028660_RM2C_path[];
+extern const Trajectory rr_seg7_trajectory_0702ED9C_RM2C_path[];
+extern const Trajectory rr_seg7_trajectory_0702EEE0_RM2C_path[];
+extern const Trajectory ccm_seg7_trajectory_penguin_race_RM2C_path[];
+#endif
+
 void shelled_koopa_attack_handler(s32 attackType);
 void obj_spit_fire(s16 relativePosX, s16 relativePosY, s16 relativePosZ, f32 scale, s32 model,
                    f32 startSpeed, f32 endSpeed, s16 movePitch);
diff --git a/src/game/object_list_processor.c b/src/game/object_list_processor.c
index 87dd3d6..e82ed1b 100644
--- a/src/game/object_list_processor.c
+++ b/src/game/object_list_processor.c
@@ -618,6 +618,7 @@ void unload_deactivated_objects(void) {
 /**
  * Unused profiling function.
  */
+/**
 UNUSED static u16 unused_get_elapsed_time(u64 *cycleCounts, s32 index) {
     u16 time;
     f64 cycles;
@@ -634,6 +635,7 @@ UNUSED static u16 unused_get_elapsed_time(u64 *cycleCounts, s32 index) {
 
     return time;
 }
+ */
 
 /**
  * Update all objects. This includes script execution, object collision detection,
diff --git a/src/game/skybox.c b/src/game/skybox.c
index ae5b216..4b1154d 100644
--- a/src/game/skybox.c
+++ b/src/game/skybox.c
@@ -87,7 +87,14 @@ extern SkyboxTexture ssl_skybox_ptrlist;
 extern SkyboxTexture water_skybox_ptrlist;
 extern SkyboxTexture wdw_skybox_ptrlist;
 
-SkyboxTexture *sSkyboxTextures[10] = {
+#ifdef RM2C
+#define MIO0_SEG(skybox, _2) \
+extern SkyboxTexture skybox##_ptrlist;
+#include "textures/skyboxes/Skybox_Rules.ld"
+#undef MIO0_SEG
+#endif
+
+SkyboxTexture *sSkyboxTextures[] = {
     &water_skybox_ptrlist,
     &bitfs_skybox_ptrlist,
     &wdw_skybox_ptrlist,
@@ -98,6 +105,12 @@ SkyboxTexture *sSkyboxTextures[10] = {
     &bidw_skybox_ptrlist,
     &clouds_skybox_ptrlist,
     &bits_skybox_ptrlist,
+#ifdef RM2C
+	#define MIO0_SEG(skybox, _2) \
+	&skybox##_ptrlist,
+	#include "textures/skyboxes/Skybox_Rules.ld"
+	#undef MIO0_SEG
+#endif 
 };
 
 /**
diff --git a/src/game/tweaks.inc.c b/src/game/tweaks.inc.c
new file mode 100644
index 0000000..f04be99
--- /dev/null
+++ b/src/game/tweaks.inc.c
@@ -0,0 +1,106 @@
+//This is a series of defines to edit commonly changed parameters in romhacks
+//These are commonly referred to as tweaks
+
+#define MARIO_START_LIVES 4
+#define INFINITE_LIVES 0
+#define START_LEVEL LEVEL_CASTLE_GROUNDS
+#define COINS_REQ_COINSTAR 100
+//level, area, warp ID
+#define EXIT_COURSE LEVEL_CASTLE, 1, 0x1F
+#define FALL_DAMAGE 1
+#define REDS_REQ 8
+//whether coins are 3d or not. Changes bhv scripts and pause menu reds rendering
+//#define USE3DCOINS 0
+//#define INCLUDE_MOP 0
+//an array
+#define STAR_MILESTONES  1, 3, 8, 30, 50, 70
+#define SHOW_STAR_MILESTONES 1
+
+#define KING_BOMB_FVEL 3.0f
+#define KING_BOMB_YAWVEL 0x100
+#define KING_BOMB_HEALTH 3
+#define KING_WHOMP_HEALTH 3
+#define KOOPA_SPEED_RACE_END 8.0f
+#define KOOPA_SPEED_BOB 4.0f
+#define KOOPA_SPEED_THI 6.0f
+
+#define MIPS1_STAR_REQ 15
+#define MIPS2_STAR_REQ 50
+
+//these already existed in the repo so I just moved them here
+#define TOAD_STAR_1_REQUIREMENT 12
+#define TOAD_STAR_2_REQUIREMENT 25
+#define TOAD_STAR_3_REQUIREMENT 35
+
+#define TOAD_STAR_1_DIALOG DIALOG_082
+#define TOAD_STAR_2_DIALOG DIALOG_076
+#define TOAD_STAR_3_DIALOG DIALOG_083
+
+#define TOAD_STAR_1_DIALOG_AFTER DIALOG_154
+#define TOAD_STAR_2_DIALOG_AFTER DIALOG_155
+#define TOAD_STAR_3_DIALOG_AFTER DIALOG_156
+
+//possibly too short?
+#define SLIDE_TIME 630
+
+#define MC_TIME 1200
+#define WC_TIME 3600
+#define VC_TIME 1200
+
+//level entry times are different than cap box times
+#define MC_LEVEL_TIME 1200
+#define WC_LEVEL_TIME 2400
+#define VC_LEVEL_TIME 1200
+
+
+#define HUD_LIVES_MARIO_X GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(22)
+#define HUD_LIVES_MARIO_Y 209
+
+#define HUD_LIVES_CROSS_X GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(38)
+#define HUD_LIVES_CROSS_Y 209
+
+#define HUD_LIVES_NUM_X GFX_DIMENSIONS_RECT_FROM_LEFT_EDGE(54)
+#define HUD_LIVES_NUM_Y 209
+
+#define HUD_COINS_X 168
+#define HUD_COINS_Y 209
+
+#define HUD_COINS_CROSS_X 184
+#define HUD_COINS_CROSS_Y 209
+
+#define HUD_COINS_NUM_X 198
+#define HUD_COINS_NUM_Y 209
+
+// X dimension - num, or 320-78 = 242
+
+#define HUD_STARS_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(78)
+#define HUD_STARS_Y 209
+
+#define HUD_STARS_CROSS_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(62)
+#define HUD_STARS_CROSS_Y 209
+
+#define HUD_STARS_NUM_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(62)
+#define HUD_STARS_NUM_Y 209
+
+#define HUD_TIME_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(150)
+#define HUD_TIME_Y 185
+
+//use the same Y value for all the times, aprostrophes are rep'd by A
+
+#define HUD_TIME_MIN_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(91)
+#define HUD_TIME_MIN_A_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(81)
+#define HUD_TIME_SEC_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(71)
+#define HUD_TIME_SEC_AA_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(46)
+#define HUD_TIME_FSEC_X GFX_DIMENSIONS_RECT_FROM_RIGHT_EDGE(37)
+#define HUD_TIME_A_Y 32
+
+//I'll do camera later
+
+#define POWER_X 140
+#define POWER_Y 166
+
+#define SHOW_STARS 1
+#define SHOW_COINS 1
+#define SHOW_LIVES 1
+#define SHOW_CAM 1
+#define SHOW_TIME 1
diff --git a/textures/skyboxes/Skybox_Rules.ld b/textures/skyboxes/Skybox_Rules.ld
new file mode 100644
index 0000000..7b33b71
--- /dev/null
+++ b/textures/skyboxes/Skybox_Rules.ld
@@ -0,0 +1 @@
+// Replace with RM2C Output after exporting skyboxes
\ No newline at end of file
diff --git a/tools/assemble_sound.py b/tools/assemble_sound.py
index f4a81d2..f18d756 100644
--- a/tools/assemble_sound.py
+++ b/tools/assemble_sound.py
@@ -825,6 +825,13 @@ def write_sequences(
             )
 
     ind_to_name = []
+    #epic
+    pops = []
+    for k,v in json.items():
+        if v==None:
+             pops.append(k)
+    for p in pops:
+        del json[p]
     for key in json:
         ind = int(key.split("_")[0], 16)
         while len(ind_to_name) <= ind:
diff --git a/tools/binPNG.py b/tools/binPNG.py
new file mode 100644
index 0000000..abc797e
--- /dev/null
+++ b/tools/binPNG.py
@@ -0,0 +1,39 @@
+import struct
+import png
+import math
+from bitstring import *
+import sys
+#convert png to bin
+
+def MakeCI(file,Bpp):
+    r = png.Reader(file)
+    re = r.read()
+    Pal = re[3]['palette']
+    Pbin = []
+    shifts = [3,3,3,7]
+    for p in Pal:
+        b = [a>>s for a,s in zip(p,shifts)]
+        if len(p)==4:
+            b = pack('3*uint:5,uint:1',*b)
+        else:
+            b = pack('3*uint:5,uint:1',*b,1)
+        Pbin.append(b.bytes)
+    bin = []
+    for p in re[2]:
+        for w in range(0,re[0],(8//Bpp)):
+            b = p[w:w+(8//Bpp)]
+            b = pack('%d*uint:%d'%((8//Bpp),Bpp),*b)
+            bin.append(b.bytes)
+    return [bin,Pbin]
+
+if __name__=='__main__':
+	[texture,palette] = MakeCI(sys.argv[1],int(sys.argv[3]))
+	pname = sys.argv[2].split('.')
+	pname.insert(2,'pal')
+	pname = '.'.join(pname)
+	p = open(pname,'w')
+	t = open(sys.argv[2],'w')
+	[t.write('0x{:02X},'.format(tex[0])) for tex in texture]
+	[p.write('0x{:02X},0x{:02X},'.format(pal[0],pal[1])) for pal in palette]
+	t.close()
+	p.close()
